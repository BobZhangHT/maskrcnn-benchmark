2019-01-17 20:54:35,180 maskrcnn_benchmark INFO: Using 2 GPUs
2019-01-17 20:54:35,180 maskrcnn_benchmark INFO: Namespace(config_file='configs/e2e_mask_rcnn_R_50_FPN_1x.yaml', distributed=True, local_rank=0, opts=['SOLVER.BASE_LR', '0.0001', 'SOLVER.IMS_PER_BATCH', '8', 'TEST.IMS_PER_BATCH', '4'], skip_test=False)
2019-01-17 20:54:35,180 maskrcnn_benchmark INFO: Collecting env info (might take some time)
2019-01-17 20:54:38,698 maskrcnn_benchmark INFO: 
PyTorch version: 1.0.0.dev20190111
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 5.2.0
CMake version: Could not collect

Python version: 3.7
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GT 710
GPU 1: Tesla K80
GPU 2: Tesla K80
GPU 3: Tesla K80
GPU 4: Tesla K80

Nvidia driver version: 390.87
cuDNN version: Probably one of the following:
/usr/local/MATLAB/R2018b/bin/glnxa64/libcudnn.so.7.1.2
/usr/local/cuda-8.0/cudnnv5.1.5_old/lib64/libcudnn.so.5.1.5
/usr/local/cuda-8.0/cudnnv5.1.5_old/lib64/libcudnn_static.a
/usr/local/cuda-8.0/cudnnv5/lib64/libcudnn.so.5.1.10
/usr/local/cuda-8.0/cudnnv5/lib64/libcudnn_static.a
/usr/local/cuda-8.0/cudnnv6/lib64/libcudnn.so.6.0.21
/usr/local/cuda-8.0/cudnnv6/lib64/libcudnn_static.a
/usr/local/cuda-8.0/cudnnv7/lib64/libcudnn.so.7.0.5
/usr/local/cuda-8.0/cudnnv7/lib64/libcudnn_static.a
/usr/local/cuda-9.0/cudnnv7/lib64/libcudnn.so.7.1.4
/usr/local/cuda-9.0/cudnnv7/lib64/libcudnn_static.a
/usr/local/cuda-9.0/cudnnv705/lib64/libcudnn.so.7.0.5
/usr/local/cuda-9.0/cudnnv705/lib64/libcudnn_static.a

Versions of relevant libraries:
[pip3] numpy (1.14.3)
[pip3] numpydoc (0.7.0)
[pip3] torch (0.4.0)
[pip3] torchvision (0.2.0)
[conda] blas                      1.0                         mkl  
[conda] mkl                       2019.1                      144  
[conda] mkl_fft                   1.0.6            py37hd81dba3_0  
[conda] mkl_random                1.0.2            py37hd81dba3_0  
[conda] pytorch-nightly           1.0.0.dev20190111 py3.7_cuda9.0.176_cudnn7.4.1_0    pytorch
        Pillow (5.4.1)
2019-01-17 20:54:38,699 maskrcnn_benchmark INFO: Loaded configuration file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml
2019-01-17 20:54:38,699 maskrcnn_benchmark INFO: 
MODEL:
  META_ARCHITECTURE: "GeneralizedRCNN"
  WEIGHT: "catalog://ImageNetPretrained/MSRA/R-50"
  BACKBONE:
    CONV_BODY: "R-50-FPN"
    OUT_CHANNELS: 256
  RPN:
    USE_FPN: True
    ANCHOR_STRIDE: (4, 8, 16, 32, 64)
    PRE_NMS_TOP_N_TRAIN: 2000
    PRE_NMS_TOP_N_TEST: 1000
    POST_NMS_TOP_N_TEST: 1000
    FPN_POST_NMS_TOP_N_TEST: 1000
  ROI_HEADS:
    USE_FPN: True
  ROI_BOX_HEAD:
    POOLER_RESOLUTION: 7
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    POOLER_SAMPLING_RATIO: 2
    FEATURE_EXTRACTOR: "FPN2MLPFeatureExtractor"
    PREDICTOR: "FPNPredictor"
    NUM_CLASSES: 3
  ROI_MASK_HEAD:
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    FEATURE_EXTRACTOR: "MaskRCNNFPNFeatureExtractor"
    PREDICTOR: "MaskRCNNC4Predictor"
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 2
    RESOLUTION: 28
    SHARE_BOX_FEATURE_EXTRACTOR: False
  MASK_ON: True
DATASETS:
  TRAIN: ("coco_rectal_train",) #("coco_2014_train", "coco_2014_valminusminival")
  TEST: ("coco_rectal_test",) #("coco_2014_minival",)
  VAL: ( "coco_rectal_val",)
DATALOADER:
  SIZE_DIVISIBILITY: 32
SOLVER:
  BASE_LR: 0.02
  WEIGHT_DECAY: 0.0001
  STEPS: (480000, 640000) #(60000, 80000)
  MAX_ITER: 720000 #90000
  WARMUP_ITERS: 500
  CHECKPOINT_PERIOD: 1000

2019-01-17 20:54:38,701 maskrcnn_benchmark INFO: Running with config:
DATALOADER:
  ASPECT_RATIO_GROUPING: True
  NUM_WORKERS: 0
  SIZE_DIVISIBILITY: 32
DATASETS:
  TEST: ('coco_rectal_test',)
  TRAIN: ('coco_rectal_train',)
  VAL: ('coco_rectal_val',)
EVAL_THRESHOLD: 0.5
INPUT:
  BRIGHT_LB_TRAIN: 0.5
  CONTRAST_LB_TRAIN: 0.5
  FLIP_PROB_TRAIN: 0.5
  JITTER_PROB_TRAIN: 0.5
  MAX_SIZE_TEST: 256
  MAX_SIZE_TRAIN: 256
  MIN_SIZE_TEST: 256
  MIN_SIZE_TRAIN: 256
  PIXEL_MEAN: [30.8782232, 30.8782232, 30.8782232]
  PIXEL_STD: [1.0, 1.0, 1.0]
  TO_BGR255: True
MODEL:
  BACKBONE:
    CONV_BODY: R-50-FPN
    FREEZE_CONV_BODY_AT: 2
    OUT_CHANNELS: 256
  DEVICE: cuda
  MASK_ON: True
  META_ARCHITECTURE: GeneralizedRCNN
  RESNETS:
    NUM_GROUPS: 1
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_FUNC: StemWithFixedBatchNorm
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: True
    TRANS_FUNC: BottleneckWithFixedBatchNorm
    WIDTH_PER_GROUP: 64
  ROI_BOX_HEAD:
    FEATURE_EXTRACTOR: FPN2MLPFeatureExtractor
    MLP_HEAD_DIM: 1024
    NUM_CLASSES: 3
    POOLER_RESOLUTION: 7
    POOLER_SAMPLING_RATIO: 2
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    PREDICTOR: FPNPredictor
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    BBOX_REG_WEIGHTS: (10.0, 10.0, 5.0, 5.0)
    BG_IOU_THRESHOLD: 0.5
    DETECTIONS_PER_IMG: 100
    FG_IOU_THRESHOLD: 0.5
    NMS: 0.5
    POSITIVE_FRACTION: 0.25
    SCORE_THRESH: 0.05
    USE_FPN: True
  ROI_MASK_HEAD:
    CONV_LAYERS: (256, 256, 256, 256)
    FEATURE_EXTRACTOR: MaskRCNNFPNFeatureExtractor
    MLP_HEAD_DIM: 1024
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 2
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    POSTPROCESS_MASKS: False
    POSTPROCESS_MASKS_THRESHOLD: 0.5
    PREDICTOR: MaskRCNNC4Predictor
    RESOLUTION: 28
    SHARE_BOX_FEATURE_EXTRACTOR: False
  RPN:
    ANCHOR_SIZES: (32, 64, 128, 256, 512)
    ANCHOR_STRIDE: (4, 8, 16, 32, 64)
    ASPECT_RATIOS: (0.5, 1.0, 2.0)
    BATCH_SIZE_PER_IMAGE: 256
    BG_IOU_THRESHOLD: 0.3
    FG_IOU_THRESHOLD: 0.7
    FPN_POST_NMS_TOP_N_TEST: 1000
    FPN_POST_NMS_TOP_N_TRAIN: 2000
    MIN_SIZE: 0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOP_N_TEST: 1000
    POST_NMS_TOP_N_TRAIN: 2000
    PRE_NMS_TOP_N_TEST: 1000
    PRE_NMS_TOP_N_TRAIN: 2000
    RPN_HEAD: SingleConvRPNHead
    STRADDLE_THRESH: 0
    USE_FPN: True
  RPN_ONLY: False
  WEIGHT: catalog://ImageNetPretrained/MSRA/R-50
OUTPUT_DIR: ./logs/test/
PATHS_CATALOG: /home/r7user3/ZhangHT/github/maskrcnn-benchmark/maskrcnn_benchmark/config/paths_catalog.py
PATIENCE: 5
SOLVER:
  BASE_LR: 0.0001
  BIAS_LR_FACTOR: 2
  CHECKPOINT_PERIOD: 1000
  GAMMA: 0.1
  IMS_PER_BATCH: 8
  MAX_ITER: 720000
  MOMENTUM: 0.9
  STEPS: (480000, 640000)
  WARMUP_FACTOR: 0.3333333333333333
  WARMUP_ITERS: 500
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: 0
TEST:
  EXPECTED_RESULTS: []
  EXPECTED_RESULTS_SIGMA_TOL: 4
  IMS_PER_BATCH: 4
2019-01-17 20:54:43,224 maskrcnn_benchmark.utils.checkpoint INFO: No checkpoint found. Initializing model from scratch
2019-01-17 20:54:43,224 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
2019-01-17 20:54:43,600 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
2019-01-17 20:54:43,608 maskrcnn_benchmark.trainer INFO: Start training
2019-01-17 20:55:33,037 maskrcnn_benchmark INFO: Using 2 GPUs
2019-01-17 20:55:33,037 maskrcnn_benchmark INFO: Namespace(config_file='configs/e2e_mask_rcnn_R_50_FPN_1x.yaml', distributed=True, local_rank=0, opts=['SOLVER.BASE_LR', '0.0001', 'SOLVER.IMS_PER_BATCH', '8', 'TEST.IMS_PER_BATCH', '4'], skip_test=False)
2019-01-17 20:55:33,037 maskrcnn_benchmark INFO: Collecting env info (might take some time)
2019-01-17 20:55:37,185 maskrcnn_benchmark INFO: 
PyTorch version: 1.0.0.dev20190111
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 5.2.0
CMake version: Could not collect

Python version: 3.7
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GT 710
GPU 1: Tesla K80
GPU 2: Tesla K80
GPU 3: Tesla K80
GPU 4: Tesla K80

Nvidia driver version: 390.87
cuDNN version: Probably one of the following:
/usr/local/MATLAB/R2018b/bin/glnxa64/libcudnn.so.7.1.2
/usr/local/cuda-8.0/cudnnv5.1.5_old/lib64/libcudnn.so.5.1.5
/usr/local/cuda-8.0/cudnnv5.1.5_old/lib64/libcudnn_static.a
/usr/local/cuda-8.0/cudnnv5/lib64/libcudnn.so.5.1.10
/usr/local/cuda-8.0/cudnnv5/lib64/libcudnn_static.a
/usr/local/cuda-8.0/cudnnv6/lib64/libcudnn.so.6.0.21
/usr/local/cuda-8.0/cudnnv6/lib64/libcudnn_static.a
/usr/local/cuda-8.0/cudnnv7/lib64/libcudnn.so.7.0.5
/usr/local/cuda-8.0/cudnnv7/lib64/libcudnn_static.a
/usr/local/cuda-9.0/cudnnv7/lib64/libcudnn.so.7.1.4
/usr/local/cuda-9.0/cudnnv7/lib64/libcudnn_static.a
/usr/local/cuda-9.0/cudnnv705/lib64/libcudnn.so.7.0.5
/usr/local/cuda-9.0/cudnnv705/lib64/libcudnn_static.a

Versions of relevant libraries:
[pip3] numpy (1.14.3)
[pip3] numpydoc (0.7.0)
[pip3] torch (0.4.0)
[pip3] torchvision (0.2.0)
[conda] blas                      1.0                         mkl  
[conda] mkl                       2019.1                      144  
[conda] mkl_fft                   1.0.6            py37hd81dba3_0  
[conda] mkl_random                1.0.2            py37hd81dba3_0  
[conda] pytorch-nightly           1.0.0.dev20190111 py3.7_cuda9.0.176_cudnn7.4.1_0    pytorch
        Pillow (5.4.1)
2019-01-17 20:55:37,186 maskrcnn_benchmark INFO: Loaded configuration file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml
2019-01-17 20:55:37,187 maskrcnn_benchmark INFO: 
MODEL:
  META_ARCHITECTURE: "GeneralizedRCNN"
  WEIGHT: "catalog://ImageNetPretrained/MSRA/R-50"
  BACKBONE:
    CONV_BODY: "R-50-FPN"
    OUT_CHANNELS: 256
  RPN:
    USE_FPN: True
    ANCHOR_STRIDE: (4, 8, 16, 32, 64)
    PRE_NMS_TOP_N_TRAIN: 2000
    PRE_NMS_TOP_N_TEST: 1000
    POST_NMS_TOP_N_TEST: 1000
    FPN_POST_NMS_TOP_N_TEST: 1000
  ROI_HEADS:
    USE_FPN: True
  ROI_BOX_HEAD:
    POOLER_RESOLUTION: 7
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    POOLER_SAMPLING_RATIO: 2
    FEATURE_EXTRACTOR: "FPN2MLPFeatureExtractor"
    PREDICTOR: "FPNPredictor"
    NUM_CLASSES: 3
  ROI_MASK_HEAD:
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    FEATURE_EXTRACTOR: "MaskRCNNFPNFeatureExtractor"
    PREDICTOR: "MaskRCNNC4Predictor"
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 2
    RESOLUTION: 28
    SHARE_BOX_FEATURE_EXTRACTOR: False
  MASK_ON: True
DATASETS:
  TRAIN: ("coco_rectal_train",) #("coco_2014_train", "coco_2014_valminusminival")
  TEST: ("coco_rectal_test",) #("coco_2014_minival",)
  VAL: ( "coco_rectal_val",)
DATALOADER:
  SIZE_DIVISIBILITY: 32
SOLVER:
  BASE_LR: 0.02
  WEIGHT_DECAY: 0.0001
  STEPS: (480000, 640000) #(60000, 80000)
  MAX_ITER: 720000 #90000
  WARMUP_ITERS: 500
  CHECKPOINT_PERIOD: 1000

2019-01-17 20:55:37,188 maskrcnn_benchmark INFO: Running with config:
DATALOADER:
  ASPECT_RATIO_GROUPING: True
  NUM_WORKERS: 0
  SIZE_DIVISIBILITY: 32
DATASETS:
  TEST: ('coco_rectal_test',)
  TRAIN: ('coco_rectal_train',)
  VAL: ('coco_rectal_val',)
EVAL_THRESHOLD: 0.5
INPUT:
  BRIGHT_LB_TRAIN: 0.5
  CONTRAST_LB_TRAIN: 0.5
  FLIP_PROB_TRAIN: 0.5
  JITTER_PROB_TRAIN: 0.5
  MAX_SIZE_TEST: 256
  MAX_SIZE_TRAIN: 256
  MIN_SIZE_TEST: 256
  MIN_SIZE_TRAIN: 256
  PIXEL_MEAN: [30.8782232, 30.8782232, 30.8782232]
  PIXEL_STD: [1.0, 1.0, 1.0]
  TO_BGR255: True
MODEL:
  BACKBONE:
    CONV_BODY: R-50-FPN
    FREEZE_CONV_BODY_AT: 2
    OUT_CHANNELS: 256
  DEVICE: cuda
  MASK_ON: True
  META_ARCHITECTURE: GeneralizedRCNN
  RESNETS:
    NUM_GROUPS: 1
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_FUNC: StemWithFixedBatchNorm
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: True
    TRANS_FUNC: BottleneckWithFixedBatchNorm
    WIDTH_PER_GROUP: 64
  ROI_BOX_HEAD:
    FEATURE_EXTRACTOR: FPN2MLPFeatureExtractor
    MLP_HEAD_DIM: 1024
    NUM_CLASSES: 3
    POOLER_RESOLUTION: 7
    POOLER_SAMPLING_RATIO: 2
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    PREDICTOR: FPNPredictor
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    BBOX_REG_WEIGHTS: (10.0, 10.0, 5.0, 5.0)
    BG_IOU_THRESHOLD: 0.5
    DETECTIONS_PER_IMG: 100
    FG_IOU_THRESHOLD: 0.5
    NMS: 0.5
    POSITIVE_FRACTION: 0.25
    SCORE_THRESH: 0.05
    USE_FPN: True
  ROI_MASK_HEAD:
    CONV_LAYERS: (256, 256, 256, 256)
    FEATURE_EXTRACTOR: MaskRCNNFPNFeatureExtractor
    MLP_HEAD_DIM: 1024
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 2
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    POSTPROCESS_MASKS: False
    POSTPROCESS_MASKS_THRESHOLD: 0.5
    PREDICTOR: MaskRCNNC4Predictor
    RESOLUTION: 28
    SHARE_BOX_FEATURE_EXTRACTOR: False
  RPN:
    ANCHOR_SIZES: (32, 64, 128, 256, 512)
    ANCHOR_STRIDE: (4, 8, 16, 32, 64)
    ASPECT_RATIOS: (0.5, 1.0, 2.0)
    BATCH_SIZE_PER_IMAGE: 256
    BG_IOU_THRESHOLD: 0.3
    FG_IOU_THRESHOLD: 0.7
    FPN_POST_NMS_TOP_N_TEST: 1000
    FPN_POST_NMS_TOP_N_TRAIN: 2000
    MIN_SIZE: 0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOP_N_TEST: 1000
    POST_NMS_TOP_N_TRAIN: 2000
    PRE_NMS_TOP_N_TEST: 1000
    PRE_NMS_TOP_N_TRAIN: 2000
    RPN_HEAD: SingleConvRPNHead
    STRADDLE_THRESH: 0
    USE_FPN: True
  RPN_ONLY: False
  WEIGHT: catalog://ImageNetPretrained/MSRA/R-50
OUTPUT_DIR: ./logs/test/
PATHS_CATALOG: /home/r7user3/ZhangHT/github/maskrcnn-benchmark/maskrcnn_benchmark/config/paths_catalog.py
PATIENCE: 5
SOLVER:
  BASE_LR: 0.0001
  BIAS_LR_FACTOR: 2
  CHECKPOINT_PERIOD: 1000
  GAMMA: 0.1
  IMS_PER_BATCH: 8
  MAX_ITER: 720000
  MOMENTUM: 0.9
  STEPS: (480000, 640000)
  WARMUP_FACTOR: 0.3333333333333333
  WARMUP_ITERS: 500
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: 0
TEST:
  EXPECTED_RESULTS: []
  EXPECTED_RESULTS_SIGMA_TOL: 4
  IMS_PER_BATCH: 4
2019-01-17 20:55:42,120 maskrcnn_benchmark.utils.checkpoint INFO: No checkpoint found. Initializing model from scratch
2019-01-17 20:55:42,121 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
2019-01-17 20:55:42,476 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
2019-01-17 20:55:42,485 maskrcnn_benchmark.trainer INFO: Start training
2019-01-17 20:57:01,903 maskrcnn_benchmark INFO: Using 2 GPUs
2019-01-17 20:57:01,903 maskrcnn_benchmark INFO: Namespace(config_file='configs/e2e_mask_rcnn_R_50_FPN_1x.yaml', distributed=True, local_rank=0, opts=['SOLVER.BASE_LR', '0.0001', 'SOLVER.IMS_PER_BATCH', '8', 'TEST.IMS_PER_BATCH', '4'], skip_test=False)
2019-01-17 20:57:01,903 maskrcnn_benchmark INFO: Collecting env info (might take some time)
2019-01-17 20:57:06,326 maskrcnn_benchmark INFO: 
PyTorch version: 1.0.0.dev20190111
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 5.2.0
CMake version: Could not collect

Python version: 3.7
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GT 710
GPU 1: Tesla K80
GPU 2: Tesla K80
GPU 3: Tesla K80
GPU 4: Tesla K80

Nvidia driver version: 390.87
cuDNN version: Probably one of the following:
/usr/local/MATLAB/R2018b/bin/glnxa64/libcudnn.so.7.1.2
/usr/local/cuda-8.0/cudnnv5.1.5_old/lib64/libcudnn.so.5.1.5
/usr/local/cuda-8.0/cudnnv5.1.5_old/lib64/libcudnn_static.a
/usr/local/cuda-8.0/cudnnv5/lib64/libcudnn.so.5.1.10
/usr/local/cuda-8.0/cudnnv5/lib64/libcudnn_static.a
/usr/local/cuda-8.0/cudnnv6/lib64/libcudnn.so.6.0.21
/usr/local/cuda-8.0/cudnnv6/lib64/libcudnn_static.a
/usr/local/cuda-8.0/cudnnv7/lib64/libcudnn.so.7.0.5
/usr/local/cuda-8.0/cudnnv7/lib64/libcudnn_static.a
/usr/local/cuda-9.0/cudnnv7/lib64/libcudnn.so.7.1.4
/usr/local/cuda-9.0/cudnnv7/lib64/libcudnn_static.a
/usr/local/cuda-9.0/cudnnv705/lib64/libcudnn.so.7.0.5
/usr/local/cuda-9.0/cudnnv705/lib64/libcudnn_static.a

Versions of relevant libraries:
[pip3] numpy (1.14.3)
[pip3] numpydoc (0.7.0)
[pip3] torch (0.4.0)
[pip3] torchvision (0.2.0)
[conda] blas                      1.0                         mkl  
[conda] mkl                       2019.1                      144  
[conda] mkl_fft                   1.0.6            py37hd81dba3_0  
[conda] mkl_random                1.0.2            py37hd81dba3_0  
[conda] pytorch-nightly           1.0.0.dev20190111 py3.7_cuda9.0.176_cudnn7.4.1_0    pytorch
        Pillow (5.4.1)
2019-01-17 20:57:06,326 maskrcnn_benchmark INFO: Loaded configuration file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml
2019-01-17 20:57:06,327 maskrcnn_benchmark INFO: 
MODEL:
  META_ARCHITECTURE: "GeneralizedRCNN"
  WEIGHT: "catalog://ImageNetPretrained/MSRA/R-50"
  BACKBONE:
    CONV_BODY: "R-50-FPN"
    OUT_CHANNELS: 256
  RPN:
    USE_FPN: True
    ANCHOR_STRIDE: (4, 8, 16, 32, 64)
    PRE_NMS_TOP_N_TRAIN: 2000
    PRE_NMS_TOP_N_TEST: 1000
    POST_NMS_TOP_N_TEST: 1000
    FPN_POST_NMS_TOP_N_TEST: 1000
  ROI_HEADS:
    USE_FPN: True
  ROI_BOX_HEAD:
    POOLER_RESOLUTION: 7
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    POOLER_SAMPLING_RATIO: 2
    FEATURE_EXTRACTOR: "FPN2MLPFeatureExtractor"
    PREDICTOR: "FPNPredictor"
    NUM_CLASSES: 3
  ROI_MASK_HEAD:
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    FEATURE_EXTRACTOR: "MaskRCNNFPNFeatureExtractor"
    PREDICTOR: "MaskRCNNC4Predictor"
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 2
    RESOLUTION: 28
    SHARE_BOX_FEATURE_EXTRACTOR: False
  MASK_ON: True
DATASETS:
  TRAIN: ("coco_rectal_train",) #("coco_2014_train", "coco_2014_valminusminival")
  TEST: ("coco_rectal_test",) #("coco_2014_minival",)
  VAL: ( "coco_rectal_val",)
DATALOADER:
  SIZE_DIVISIBILITY: 32
SOLVER:
  BASE_LR: 0.02
  WEIGHT_DECAY: 0.0001
  STEPS: (480000, 640000) #(60000, 80000)
  MAX_ITER: 720000 #90000
  WARMUP_ITERS: 500
  CHECKPOINT_PERIOD: 1000

2019-01-17 20:57:06,327 maskrcnn_benchmark INFO: Running with config:
DATALOADER:
  ASPECT_RATIO_GROUPING: True
  NUM_WORKERS: 0
  SIZE_DIVISIBILITY: 32
DATASETS:
  TEST: ('coco_rectal_test',)
  TRAIN: ('coco_rectal_train',)
  VAL: ('coco_rectal_val',)
EVAL_THRESHOLD: 0.5
INPUT:
  BRIGHT_LB_TRAIN: 0.5
  CONTRAST_LB_TRAIN: 0.5
  FLIP_PROB_TRAIN: 0.5
  JITTER_PROB_TRAIN: 0.5
  MAX_SIZE_TEST: 256
  MAX_SIZE_TRAIN: 256
  MIN_SIZE_TEST: 256
  MIN_SIZE_TRAIN: 256
  PIXEL_MEAN: [30.8782232, 30.8782232, 30.8782232]
  PIXEL_STD: [1.0, 1.0, 1.0]
  TO_BGR255: True
MODEL:
  BACKBONE:
    CONV_BODY: R-50-FPN
    FREEZE_CONV_BODY_AT: 2
    OUT_CHANNELS: 256
  DEVICE: cuda
  MASK_ON: True
  META_ARCHITECTURE: GeneralizedRCNN
  RESNETS:
    NUM_GROUPS: 1
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_FUNC: StemWithFixedBatchNorm
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: True
    TRANS_FUNC: BottleneckWithFixedBatchNorm
    WIDTH_PER_GROUP: 64
  ROI_BOX_HEAD:
    FEATURE_EXTRACTOR: FPN2MLPFeatureExtractor
    MLP_HEAD_DIM: 1024
    NUM_CLASSES: 3
    POOLER_RESOLUTION: 7
    POOLER_SAMPLING_RATIO: 2
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    PREDICTOR: FPNPredictor
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    BBOX_REG_WEIGHTS: (10.0, 10.0, 5.0, 5.0)
    BG_IOU_THRESHOLD: 0.5
    DETECTIONS_PER_IMG: 100
    FG_IOU_THRESHOLD: 0.5
    NMS: 0.5
    POSITIVE_FRACTION: 0.25
    SCORE_THRESH: 0.05
    USE_FPN: True
  ROI_MASK_HEAD:
    CONV_LAYERS: (256, 256, 256, 256)
    FEATURE_EXTRACTOR: MaskRCNNFPNFeatureExtractor
    MLP_HEAD_DIM: 1024
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 2
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    POSTPROCESS_MASKS: False
    POSTPROCESS_MASKS_THRESHOLD: 0.5
    PREDICTOR: MaskRCNNC4Predictor
    RESOLUTION: 28
    SHARE_BOX_FEATURE_EXTRACTOR: False
  RPN:
    ANCHOR_SIZES: (32, 64, 128, 256, 512)
    ANCHOR_STRIDE: (4, 8, 16, 32, 64)
    ASPECT_RATIOS: (0.5, 1.0, 2.0)
    BATCH_SIZE_PER_IMAGE: 256
    BG_IOU_THRESHOLD: 0.3
    FG_IOU_THRESHOLD: 0.7
    FPN_POST_NMS_TOP_N_TEST: 1000
    FPN_POST_NMS_TOP_N_TRAIN: 2000
    MIN_SIZE: 0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOP_N_TEST: 1000
    POST_NMS_TOP_N_TRAIN: 2000
    PRE_NMS_TOP_N_TEST: 1000
    PRE_NMS_TOP_N_TRAIN: 2000
    RPN_HEAD: SingleConvRPNHead
    STRADDLE_THRESH: 0
    USE_FPN: True
  RPN_ONLY: False
  WEIGHT: catalog://ImageNetPretrained/MSRA/R-50
OUTPUT_DIR: ./logs/test/
PATHS_CATALOG: /home/r7user3/ZhangHT/github/maskrcnn-benchmark/maskrcnn_benchmark/config/paths_catalog.py
PATIENCE: 5
SOLVER:
  BASE_LR: 0.0001
  BIAS_LR_FACTOR: 2
  CHECKPOINT_PERIOD: 1000
  GAMMA: 0.1
  IMS_PER_BATCH: 8
  MAX_ITER: 720000
  MOMENTUM: 0.9
  STEPS: (480000, 640000)
  WARMUP_FACTOR: 0.3333333333333333
  WARMUP_ITERS: 500
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: 0
TEST:
  EXPECTED_RESULTS: []
  EXPECTED_RESULTS_SIGMA_TOL: 4
  IMS_PER_BATCH: 4
2019-01-17 20:57:11,490 maskrcnn_benchmark.utils.checkpoint INFO: No checkpoint found. Initializing model from scratch
2019-01-17 20:57:11,491 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
2019-01-17 20:57:11,912 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
2019-01-17 20:57:11,922 maskrcnn_benchmark.trainer INFO: Start training
2019-01-17 21:01:33,053 maskrcnn_benchmark INFO: Using 2 GPUs
2019-01-17 21:01:33,053 maskrcnn_benchmark INFO: Namespace(config_file='configs/e2e_mask_rcnn_R_50_FPN_1x.yaml', distributed=True, local_rank=0, opts=['SOLVER.BASE_LR', '0.0001', 'SOLVER.IMS_PER_BATCH', '8', 'TEST.IMS_PER_BATCH', '4'], skip_test=False)
2019-01-17 21:01:33,053 maskrcnn_benchmark INFO: Collecting env info (might take some time)
2019-01-17 21:01:37,269 maskrcnn_benchmark INFO: 
PyTorch version: 1.0.0.dev20190111
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 5.2.0
CMake version: Could not collect

Python version: 3.7
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GT 710
GPU 1: Tesla K80
GPU 2: Tesla K80
GPU 3: Tesla K80
GPU 4: Tesla K80

Nvidia driver version: 390.87
cuDNN version: Probably one of the following:
/usr/local/MATLAB/R2018b/bin/glnxa64/libcudnn.so.7.1.2
/usr/local/cuda-8.0/cudnnv5.1.5_old/lib64/libcudnn.so.5.1.5
/usr/local/cuda-8.0/cudnnv5.1.5_old/lib64/libcudnn_static.a
/usr/local/cuda-8.0/cudnnv5/lib64/libcudnn.so.5.1.10
/usr/local/cuda-8.0/cudnnv5/lib64/libcudnn_static.a
/usr/local/cuda-8.0/cudnnv6/lib64/libcudnn.so.6.0.21
/usr/local/cuda-8.0/cudnnv6/lib64/libcudnn_static.a
/usr/local/cuda-8.0/cudnnv7/lib64/libcudnn.so.7.0.5
/usr/local/cuda-8.0/cudnnv7/lib64/libcudnn_static.a
/usr/local/cuda-9.0/cudnnv7/lib64/libcudnn.so.7.1.4
/usr/local/cuda-9.0/cudnnv7/lib64/libcudnn_static.a
/usr/local/cuda-9.0/cudnnv705/lib64/libcudnn.so.7.0.5
/usr/local/cuda-9.0/cudnnv705/lib64/libcudnn_static.a

Versions of relevant libraries:
[pip3] numpy (1.14.3)
[pip3] numpydoc (0.7.0)
[pip3] torch (0.4.0)
[pip3] torchvision (0.2.0)
[conda] blas                      1.0                         mkl  
[conda] mkl                       2019.1                      144  
[conda] mkl_fft                   1.0.6            py37hd81dba3_0  
[conda] mkl_random                1.0.2            py37hd81dba3_0  
[conda] pytorch-nightly           1.0.0.dev20190111 py3.7_cuda9.0.176_cudnn7.4.1_0    pytorch
        Pillow (5.4.1)
2019-01-17 21:01:37,270 maskrcnn_benchmark INFO: Loaded configuration file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml
2019-01-17 21:01:37,270 maskrcnn_benchmark INFO: 
MODEL:
  META_ARCHITECTURE: "GeneralizedRCNN"
  WEIGHT: "catalog://ImageNetPretrained/MSRA/R-50"
  BACKBONE:
    CONV_BODY: "R-50-FPN"
    OUT_CHANNELS: 256
  RPN:
    USE_FPN: True
    ANCHOR_STRIDE: (4, 8, 16, 32, 64)
    PRE_NMS_TOP_N_TRAIN: 2000
    PRE_NMS_TOP_N_TEST: 1000
    POST_NMS_TOP_N_TEST: 1000
    FPN_POST_NMS_TOP_N_TEST: 1000
  ROI_HEADS:
    USE_FPN: True
  ROI_BOX_HEAD:
    POOLER_RESOLUTION: 7
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    POOLER_SAMPLING_RATIO: 2
    FEATURE_EXTRACTOR: "FPN2MLPFeatureExtractor"
    PREDICTOR: "FPNPredictor"
    NUM_CLASSES: 3
  ROI_MASK_HEAD:
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    FEATURE_EXTRACTOR: "MaskRCNNFPNFeatureExtractor"
    PREDICTOR: "MaskRCNNC4Predictor"
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 2
    RESOLUTION: 28
    SHARE_BOX_FEATURE_EXTRACTOR: False
  MASK_ON: True
DATASETS:
  TRAIN: ("coco_rectal_train",) #("coco_2014_train", "coco_2014_valminusminival")
  TEST: ("coco_rectal_test",) #("coco_2014_minival",)
  VAL: ( "coco_rectal_val",)
DATALOADER:
  SIZE_DIVISIBILITY: 32
SOLVER:
  BASE_LR: 0.02
  WEIGHT_DECAY: 0.0001
  STEPS: (480000, 640000) #(60000, 80000)
  MAX_ITER: 720000 #90000
  WARMUP_ITERS: 500
  CHECKPOINT_PERIOD: 1000

2019-01-17 21:01:37,271 maskrcnn_benchmark INFO: Running with config:
DATALOADER:
  ASPECT_RATIO_GROUPING: True
  NUM_WORKERS: 0
  SIZE_DIVISIBILITY: 32
DATASETS:
  TEST: ('coco_rectal_test',)
  TRAIN: ('coco_rectal_train',)
  VAL: ('coco_rectal_val',)
EVAL_THRESHOLD: 0.5
INPUT:
  BRIGHT_LB_TRAIN: 0.5
  CONTRAST_LB_TRAIN: 0.5
  FLIP_PROB_TRAIN: 0.5
  JITTER_PROB_TRAIN: 0.5
  MAX_SIZE_TEST: 256
  MAX_SIZE_TRAIN: 256
  MIN_SIZE_TEST: 256
  MIN_SIZE_TRAIN: 256
  PIXEL_MEAN: [30.8782232, 30.8782232, 30.8782232]
  PIXEL_STD: [1.0, 1.0, 1.0]
  TO_BGR255: True
MODEL:
  BACKBONE:
    CONV_BODY: R-50-FPN
    FREEZE_CONV_BODY_AT: 2
    OUT_CHANNELS: 256
  DEVICE: cuda
  MASK_ON: True
  META_ARCHITECTURE: GeneralizedRCNN
  RESNETS:
    NUM_GROUPS: 1
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_FUNC: StemWithFixedBatchNorm
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: True
    TRANS_FUNC: BottleneckWithFixedBatchNorm
    WIDTH_PER_GROUP: 64
  ROI_BOX_HEAD:
    FEATURE_EXTRACTOR: FPN2MLPFeatureExtractor
    MLP_HEAD_DIM: 1024
    NUM_CLASSES: 3
    POOLER_RESOLUTION: 7
    POOLER_SAMPLING_RATIO: 2
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    PREDICTOR: FPNPredictor
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    BBOX_REG_WEIGHTS: (10.0, 10.0, 5.0, 5.0)
    BG_IOU_THRESHOLD: 0.5
    DETECTIONS_PER_IMG: 100
    FG_IOU_THRESHOLD: 0.5
    NMS: 0.5
    POSITIVE_FRACTION: 0.25
    SCORE_THRESH: 0.05
    USE_FPN: True
  ROI_MASK_HEAD:
    CONV_LAYERS: (256, 256, 256, 256)
    FEATURE_EXTRACTOR: MaskRCNNFPNFeatureExtractor
    MLP_HEAD_DIM: 1024
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 2
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    POSTPROCESS_MASKS: False
    POSTPROCESS_MASKS_THRESHOLD: 0.5
    PREDICTOR: MaskRCNNC4Predictor
    RESOLUTION: 28
    SHARE_BOX_FEATURE_EXTRACTOR: False
  RPN:
    ANCHOR_SIZES: (32, 64, 128, 256, 512)
    ANCHOR_STRIDE: (4, 8, 16, 32, 64)
    ASPECT_RATIOS: (0.5, 1.0, 2.0)
    BATCH_SIZE_PER_IMAGE: 256
    BG_IOU_THRESHOLD: 0.3
    FG_IOU_THRESHOLD: 0.7
    FPN_POST_NMS_TOP_N_TEST: 1000
    FPN_POST_NMS_TOP_N_TRAIN: 2000
    MIN_SIZE: 0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOP_N_TEST: 1000
    POST_NMS_TOP_N_TRAIN: 2000
    PRE_NMS_TOP_N_TEST: 1000
    PRE_NMS_TOP_N_TRAIN: 2000
    RPN_HEAD: SingleConvRPNHead
    STRADDLE_THRESH: 0
    USE_FPN: True
  RPN_ONLY: False
  WEIGHT: catalog://ImageNetPretrained/MSRA/R-50
OUTPUT_DIR: ./logs/test/
PATHS_CATALOG: /home/r7user3/ZhangHT/github/maskrcnn-benchmark/maskrcnn_benchmark/config/paths_catalog.py
PATIENCE: 5
SOLVER:
  BASE_LR: 0.0001
  BIAS_LR_FACTOR: 2
  CHECKPOINT_PERIOD: 1000
  GAMMA: 0.1
  IMS_PER_BATCH: 8
  MAX_ITER: 720000
  MOMENTUM: 0.9
  STEPS: (480000, 640000)
  WARMUP_FACTOR: 0.3333333333333333
  WARMUP_ITERS: 500
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: 0
TEST:
  EXPECTED_RESULTS: []
  EXPECTED_RESULTS_SIGMA_TOL: 4
  IMS_PER_BATCH: 4
2019-01-17 21:01:41,860 maskrcnn_benchmark.utils.checkpoint INFO: No checkpoint found. Initializing model from scratch
2019-01-17 21:01:41,861 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
2019-01-17 21:01:42,332 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
2019-01-17 21:01:42,342 maskrcnn_benchmark.trainer INFO: Start training
2019-01-17 21:04:30,426 maskrcnn_benchmark INFO: Using 2 GPUs
2019-01-17 21:04:30,427 maskrcnn_benchmark INFO: Namespace(config_file='configs/e2e_mask_rcnn_R_50_FPN_1x.yaml', distributed=True, local_rank=0, opts=['SOLVER.BASE_LR', '0.0001', 'SOLVER.IMS_PER_BATCH', '8', 'TEST.IMS_PER_BATCH', '4'], skip_test=False)
2019-01-17 21:04:30,427 maskrcnn_benchmark INFO: Collecting env info (might take some time)
2019-01-17 21:04:34,000 maskrcnn_benchmark INFO: 
PyTorch version: 1.0.0.dev20190111
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 5.2.0
CMake version: Could not collect

Python version: 3.7
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GT 710
GPU 1: Tesla K80
GPU 2: Tesla K80
GPU 3: Tesla K80
GPU 4: Tesla K80

Nvidia driver version: 390.87
cuDNN version: Probably one of the following:
/usr/local/MATLAB/R2018b/bin/glnxa64/libcudnn.so.7.1.2
/usr/local/cuda-8.0/cudnnv5.1.5_old/lib64/libcudnn.so.5.1.5
/usr/local/cuda-8.0/cudnnv5.1.5_old/lib64/libcudnn_static.a
/usr/local/cuda-8.0/cudnnv5/lib64/libcudnn.so.5.1.10
/usr/local/cuda-8.0/cudnnv5/lib64/libcudnn_static.a
/usr/local/cuda-8.0/cudnnv6/lib64/libcudnn.so.6.0.21
/usr/local/cuda-8.0/cudnnv6/lib64/libcudnn_static.a
/usr/local/cuda-8.0/cudnnv7/lib64/libcudnn.so.7.0.5
/usr/local/cuda-8.0/cudnnv7/lib64/libcudnn_static.a
/usr/local/cuda-9.0/cudnnv7/lib64/libcudnn.so.7.1.4
/usr/local/cuda-9.0/cudnnv7/lib64/libcudnn_static.a
/usr/local/cuda-9.0/cudnnv705/lib64/libcudnn.so.7.0.5
/usr/local/cuda-9.0/cudnnv705/lib64/libcudnn_static.a

Versions of relevant libraries:
[pip3] numpy (1.14.3)
[pip3] numpydoc (0.7.0)
[pip3] torch (0.4.0)
[pip3] torchvision (0.2.0)
[conda] blas                      1.0                         mkl  
[conda] mkl                       2019.1                      144  
[conda] mkl_fft                   1.0.6            py37hd81dba3_0  
[conda] mkl_random                1.0.2            py37hd81dba3_0  
[conda] pytorch-nightly           1.0.0.dev20190111 py3.7_cuda9.0.176_cudnn7.4.1_0    pytorch
        Pillow (5.4.1)
2019-01-17 21:04:34,001 maskrcnn_benchmark INFO: Loaded configuration file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml
2019-01-17 21:04:34,001 maskrcnn_benchmark INFO: 
MODEL:
  META_ARCHITECTURE: "GeneralizedRCNN"
  WEIGHT: "catalog://ImageNetPretrained/MSRA/R-50"
  BACKBONE:
    CONV_BODY: "R-50-FPN"
    OUT_CHANNELS: 256
  RPN:
    USE_FPN: True
    ANCHOR_STRIDE: (4, 8, 16, 32, 64)
    PRE_NMS_TOP_N_TRAIN: 2000
    PRE_NMS_TOP_N_TEST: 1000
    POST_NMS_TOP_N_TEST: 1000
    FPN_POST_NMS_TOP_N_TEST: 1000
  ROI_HEADS:
    USE_FPN: True
  ROI_BOX_HEAD:
    POOLER_RESOLUTION: 7
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    POOLER_SAMPLING_RATIO: 2
    FEATURE_EXTRACTOR: "FPN2MLPFeatureExtractor"
    PREDICTOR: "FPNPredictor"
    NUM_CLASSES: 3
  ROI_MASK_HEAD:
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    FEATURE_EXTRACTOR: "MaskRCNNFPNFeatureExtractor"
    PREDICTOR: "MaskRCNNC4Predictor"
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 2
    RESOLUTION: 28
    SHARE_BOX_FEATURE_EXTRACTOR: False
  MASK_ON: True
DATASETS:
  TRAIN: ("coco_rectal_train",) #("coco_2014_train", "coco_2014_valminusminival")
  TEST: ("coco_rectal_test",) #("coco_2014_minival",)
  VAL: ( "coco_rectal_val",)
DATALOADER:
  SIZE_DIVISIBILITY: 32
SOLVER:
  BASE_LR: 0.02
  WEIGHT_DECAY: 0.0001
  STEPS: (480000, 640000) #(60000, 80000)
  MAX_ITER: 720000 #90000
  WARMUP_ITERS: 500
  CHECKPOINT_PERIOD: 1000

2019-01-17 21:04:34,003 maskrcnn_benchmark INFO: Running with config:
DATALOADER:
  ASPECT_RATIO_GROUPING: True
  NUM_WORKERS: 0
  SIZE_DIVISIBILITY: 32
DATASETS:
  TEST: ('coco_rectal_test',)
  TRAIN: ('coco_rectal_train',)
  VAL: ('coco_rectal_val',)
EVAL_THRESHOLD: 0.5
INPUT:
  BRIGHT_LB_TRAIN: 0.5
  CONTRAST_LB_TRAIN: 0.5
  FLIP_PROB_TRAIN: 0.5
  JITTER_PROB_TRAIN: 0.5
  MAX_SIZE_TEST: 256
  MAX_SIZE_TRAIN: 256
  MIN_SIZE_TEST: 256
  MIN_SIZE_TRAIN: 256
  PIXEL_MEAN: [30.8782232, 30.8782232, 30.8782232]
  PIXEL_STD: [1.0, 1.0, 1.0]
  TO_BGR255: True
MODEL:
  BACKBONE:
    CONV_BODY: R-50-FPN
    FREEZE_CONV_BODY_AT: 2
    OUT_CHANNELS: 256
  DEVICE: cuda
  MASK_ON: True
  META_ARCHITECTURE: GeneralizedRCNN
  RESNETS:
    NUM_GROUPS: 1
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_FUNC: StemWithFixedBatchNorm
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: True
    TRANS_FUNC: BottleneckWithFixedBatchNorm
    WIDTH_PER_GROUP: 64
  ROI_BOX_HEAD:
    FEATURE_EXTRACTOR: FPN2MLPFeatureExtractor
    MLP_HEAD_DIM: 1024
    NUM_CLASSES: 3
    POOLER_RESOLUTION: 7
    POOLER_SAMPLING_RATIO: 2
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    PREDICTOR: FPNPredictor
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    BBOX_REG_WEIGHTS: (10.0, 10.0, 5.0, 5.0)
    BG_IOU_THRESHOLD: 0.5
    DETECTIONS_PER_IMG: 100
    FG_IOU_THRESHOLD: 0.5
    NMS: 0.5
    POSITIVE_FRACTION: 0.25
    SCORE_THRESH: 0.05
    USE_FPN: True
  ROI_MASK_HEAD:
    CONV_LAYERS: (256, 256, 256, 256)
    FEATURE_EXTRACTOR: MaskRCNNFPNFeatureExtractor
    MLP_HEAD_DIM: 1024
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 2
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    POSTPROCESS_MASKS: False
    POSTPROCESS_MASKS_THRESHOLD: 0.5
    PREDICTOR: MaskRCNNC4Predictor
    RESOLUTION: 28
    SHARE_BOX_FEATURE_EXTRACTOR: False
  RPN:
    ANCHOR_SIZES: (32, 64, 128, 256, 512)
    ANCHOR_STRIDE: (4, 8, 16, 32, 64)
    ASPECT_RATIOS: (0.5, 1.0, 2.0)
    BATCH_SIZE_PER_IMAGE: 256
    BG_IOU_THRESHOLD: 0.3
    FG_IOU_THRESHOLD: 0.7
    FPN_POST_NMS_TOP_N_TEST: 1000
    FPN_POST_NMS_TOP_N_TRAIN: 2000
    MIN_SIZE: 0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOP_N_TEST: 1000
    POST_NMS_TOP_N_TRAIN: 2000
    PRE_NMS_TOP_N_TEST: 1000
    PRE_NMS_TOP_N_TRAIN: 2000
    RPN_HEAD: SingleConvRPNHead
    STRADDLE_THRESH: 0
    USE_FPN: True
  RPN_ONLY: False
  WEIGHT: catalog://ImageNetPretrained/MSRA/R-50
OUTPUT_DIR: ./logs/test/
PATHS_CATALOG: /home/r7user3/ZhangHT/github/maskrcnn-benchmark/maskrcnn_benchmark/config/paths_catalog.py
PATIENCE: 5
SOLVER:
  BASE_LR: 0.0001
  BIAS_LR_FACTOR: 2
  CHECKPOINT_PERIOD: 1000
  GAMMA: 0.1
  IMS_PER_BATCH: 8
  MAX_ITER: 720000
  MOMENTUM: 0.9
  STEPS: (480000, 640000)
  WARMUP_FACTOR: 0.3333333333333333
  WARMUP_ITERS: 500
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: 0
TEST:
  EXPECTED_RESULTS: []
  EXPECTED_RESULTS_SIGMA_TOL: 4
  IMS_PER_BATCH: 4
2019-01-17 21:04:38,661 maskrcnn_benchmark.utils.checkpoint INFO: No checkpoint found. Initializing model from scratch
2019-01-17 21:04:38,661 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
2019-01-17 21:04:39,042 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
2019-01-17 21:05:09,476 maskrcnn_benchmark INFO: Using 2 GPUs
2019-01-17 21:05:09,476 maskrcnn_benchmark INFO: Namespace(config_file='configs/e2e_mask_rcnn_R_50_FPN_1x.yaml', distributed=True, local_rank=0, opts=['SOLVER.BASE_LR', '0.0001', 'SOLVER.IMS_PER_BATCH', '8', 'TEST.IMS_PER_BATCH', '4'], skip_test=False)
2019-01-17 21:05:09,476 maskrcnn_benchmark INFO: Collecting env info (might take some time)
2019-01-17 21:05:13,446 maskrcnn_benchmark INFO: 
PyTorch version: 1.0.0.dev20190111
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 5.2.0
CMake version: Could not collect

Python version: 3.7
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GT 710
GPU 1: Tesla K80
GPU 2: Tesla K80
GPU 3: Tesla K80
GPU 4: Tesla K80

Nvidia driver version: 390.87
cuDNN version: Probably one of the following:
/usr/local/MATLAB/R2018b/bin/glnxa64/libcudnn.so.7.1.2
/usr/local/cuda-8.0/cudnnv5.1.5_old/lib64/libcudnn.so.5.1.5
/usr/local/cuda-8.0/cudnnv5.1.5_old/lib64/libcudnn_static.a
/usr/local/cuda-8.0/cudnnv5/lib64/libcudnn.so.5.1.10
/usr/local/cuda-8.0/cudnnv5/lib64/libcudnn_static.a
/usr/local/cuda-8.0/cudnnv6/lib64/libcudnn.so.6.0.21
/usr/local/cuda-8.0/cudnnv6/lib64/libcudnn_static.a
/usr/local/cuda-8.0/cudnnv7/lib64/libcudnn.so.7.0.5
/usr/local/cuda-8.0/cudnnv7/lib64/libcudnn_static.a
/usr/local/cuda-9.0/cudnnv7/lib64/libcudnn.so.7.1.4
/usr/local/cuda-9.0/cudnnv7/lib64/libcudnn_static.a
/usr/local/cuda-9.0/cudnnv705/lib64/libcudnn.so.7.0.5
/usr/local/cuda-9.0/cudnnv705/lib64/libcudnn_static.a

Versions of relevant libraries:
[pip3] numpy (1.14.3)
[pip3] numpydoc (0.7.0)
[pip3] torch (0.4.0)
[pip3] torchvision (0.2.0)
[conda] blas                      1.0                         mkl  
[conda] mkl                       2019.1                      144  
[conda] mkl_fft                   1.0.6            py37hd81dba3_0  
[conda] mkl_random                1.0.2            py37hd81dba3_0  
[conda] pytorch-nightly           1.0.0.dev20190111 py3.7_cuda9.0.176_cudnn7.4.1_0    pytorch
        Pillow (5.4.1)
2019-01-17 21:05:13,447 maskrcnn_benchmark INFO: Loaded configuration file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml
2019-01-17 21:05:13,448 maskrcnn_benchmark INFO: 
MODEL:
  META_ARCHITECTURE: "GeneralizedRCNN"
  WEIGHT: "catalog://ImageNetPretrained/MSRA/R-50"
  BACKBONE:
    CONV_BODY: "R-50-FPN"
    OUT_CHANNELS: 256
  RPN:
    USE_FPN: True
    ANCHOR_STRIDE: (4, 8, 16, 32, 64)
    PRE_NMS_TOP_N_TRAIN: 2000
    PRE_NMS_TOP_N_TEST: 1000
    POST_NMS_TOP_N_TEST: 1000
    FPN_POST_NMS_TOP_N_TEST: 1000
  ROI_HEADS:
    USE_FPN: True
  ROI_BOX_HEAD:
    POOLER_RESOLUTION: 7
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    POOLER_SAMPLING_RATIO: 2
    FEATURE_EXTRACTOR: "FPN2MLPFeatureExtractor"
    PREDICTOR: "FPNPredictor"
    NUM_CLASSES: 3
  ROI_MASK_HEAD:
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    FEATURE_EXTRACTOR: "MaskRCNNFPNFeatureExtractor"
    PREDICTOR: "MaskRCNNC4Predictor"
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 2
    RESOLUTION: 28
    SHARE_BOX_FEATURE_EXTRACTOR: False
  MASK_ON: True
DATASETS:
  TRAIN: ("coco_rectal_train",) #("coco_2014_train", "coco_2014_valminusminival")
  TEST: ("coco_rectal_test",) #("coco_2014_minival",)
  VAL: ( "coco_rectal_val",)
DATALOADER:
  SIZE_DIVISIBILITY: 32
SOLVER:
  BASE_LR: 0.02
  WEIGHT_DECAY: 0.0001
  STEPS: (480000, 640000) #(60000, 80000)
  MAX_ITER: 720000 #90000
  WARMUP_ITERS: 500
  CHECKPOINT_PERIOD: 1000

2019-01-17 21:05:13,449 maskrcnn_benchmark INFO: Running with config:
DATALOADER:
  ASPECT_RATIO_GROUPING: True
  NUM_WORKERS: 0
  SIZE_DIVISIBILITY: 32
DATASETS:
  TEST: ('coco_rectal_test',)
  TRAIN: ('coco_rectal_train',)
  VAL: ('coco_rectal_val',)
EVAL_THRESHOLD: 0.5
INPUT:
  BRIGHT_LB_TRAIN: 0.5
  CONTRAST_LB_TRAIN: 0.5
  FLIP_PROB_TRAIN: 0.5
  JITTER_PROB_TRAIN: 0.5
  MAX_SIZE_TEST: 256
  MAX_SIZE_TRAIN: 256
  MIN_SIZE_TEST: 256
  MIN_SIZE_TRAIN: 256
  PIXEL_MEAN: [30.8782232, 30.8782232, 30.8782232]
  PIXEL_STD: [1.0, 1.0, 1.0]
  TO_BGR255: True
MODEL:
  BACKBONE:
    CONV_BODY: R-50-FPN
    FREEZE_CONV_BODY_AT: 2
    OUT_CHANNELS: 256
  DEVICE: cuda
  MASK_ON: True
  META_ARCHITECTURE: GeneralizedRCNN
  RESNETS:
    NUM_GROUPS: 1
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_FUNC: StemWithFixedBatchNorm
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: True
    TRANS_FUNC: BottleneckWithFixedBatchNorm
    WIDTH_PER_GROUP: 64
  ROI_BOX_HEAD:
    FEATURE_EXTRACTOR: FPN2MLPFeatureExtractor
    MLP_HEAD_DIM: 1024
    NUM_CLASSES: 3
    POOLER_RESOLUTION: 7
    POOLER_SAMPLING_RATIO: 2
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    PREDICTOR: FPNPredictor
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    BBOX_REG_WEIGHTS: (10.0, 10.0, 5.0, 5.0)
    BG_IOU_THRESHOLD: 0.5
    DETECTIONS_PER_IMG: 100
    FG_IOU_THRESHOLD: 0.5
    NMS: 0.5
    POSITIVE_FRACTION: 0.25
    SCORE_THRESH: 0.05
    USE_FPN: True
  ROI_MASK_HEAD:
    CONV_LAYERS: (256, 256, 256, 256)
    FEATURE_EXTRACTOR: MaskRCNNFPNFeatureExtractor
    MLP_HEAD_DIM: 1024
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 2
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    POSTPROCESS_MASKS: False
    POSTPROCESS_MASKS_THRESHOLD: 0.5
    PREDICTOR: MaskRCNNC4Predictor
    RESOLUTION: 28
    SHARE_BOX_FEATURE_EXTRACTOR: False
  RPN:
    ANCHOR_SIZES: (32, 64, 128, 256, 512)
    ANCHOR_STRIDE: (4, 8, 16, 32, 64)
    ASPECT_RATIOS: (0.5, 1.0, 2.0)
    BATCH_SIZE_PER_IMAGE: 256
    BG_IOU_THRESHOLD: 0.3
    FG_IOU_THRESHOLD: 0.7
    FPN_POST_NMS_TOP_N_TEST: 1000
    FPN_POST_NMS_TOP_N_TRAIN: 2000
    MIN_SIZE: 0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOP_N_TEST: 1000
    POST_NMS_TOP_N_TRAIN: 2000
    PRE_NMS_TOP_N_TEST: 1000
    PRE_NMS_TOP_N_TRAIN: 2000
    RPN_HEAD: SingleConvRPNHead
    STRADDLE_THRESH: 0
    USE_FPN: True
  RPN_ONLY: False
  WEIGHT: catalog://ImageNetPretrained/MSRA/R-50
OUTPUT_DIR: ./logs/test/
PATHS_CATALOG: /home/r7user3/ZhangHT/github/maskrcnn-benchmark/maskrcnn_benchmark/config/paths_catalog.py
PATIENCE: 5
SOLVER:
  BASE_LR: 0.0001
  BIAS_LR_FACTOR: 2
  CHECKPOINT_PERIOD: 1000
  GAMMA: 0.1
  IMS_PER_BATCH: 8
  MAX_ITER: 720000
  MOMENTUM: 0.9
  STEPS: (480000, 640000)
  WARMUP_FACTOR: 0.3333333333333333
  WARMUP_ITERS: 500
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: 0
TEST:
  EXPECTED_RESULTS: []
  EXPECTED_RESULTS_SIGMA_TOL: 4
  IMS_PER_BATCH: 4
2019-01-17 21:05:19,199 maskrcnn_benchmark.utils.checkpoint INFO: No checkpoint found. Initializing model from scratch
2019-01-17 21:05:19,199 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
2019-01-17 21:05:19,556 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
2019-01-17 21:05:19,665 maskrcnn_benchmark.trainer INFO: Start training
2019-01-17 21:26:01,878 maskrcnn_benchmark INFO: Using 2 GPUs
2019-01-17 21:26:01,878 maskrcnn_benchmark INFO: Namespace(config_file='configs/e2e_mask_rcnn_R_50_FPN_1x.yaml', distributed=True, local_rank=0, opts=['SOLVER.BASE_LR', '0.0001', 'SOLVER.IMS_PER_BATCH', '16', 'TEST.IMS_PER_BATCH', '4'], skip_test=False)
2019-01-17 21:26:01,878 maskrcnn_benchmark INFO: Collecting env info (might take some time)
2019-01-17 21:26:05,966 maskrcnn_benchmark INFO: 
PyTorch version: 1.0.0.dev20190111
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 5.2.0
CMake version: Could not collect

Python version: 3.7
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GT 710
GPU 1: Tesla K80
GPU 2: Tesla K80
GPU 3: Tesla K80
GPU 4: Tesla K80

Nvidia driver version: 390.87
cuDNN version: Probably one of the following:
/usr/local/MATLAB/R2018b/bin/glnxa64/libcudnn.so.7.1.2
/usr/local/cuda-8.0/cudnnv5.1.5_old/lib64/libcudnn.so.5.1.5
/usr/local/cuda-8.0/cudnnv5.1.5_old/lib64/libcudnn_static.a
/usr/local/cuda-8.0/cudnnv5/lib64/libcudnn.so.5.1.10
/usr/local/cuda-8.0/cudnnv5/lib64/libcudnn_static.a
/usr/local/cuda-8.0/cudnnv6/lib64/libcudnn.so.6.0.21
/usr/local/cuda-8.0/cudnnv6/lib64/libcudnn_static.a
/usr/local/cuda-8.0/cudnnv7/lib64/libcudnn.so.7.0.5
/usr/local/cuda-8.0/cudnnv7/lib64/libcudnn_static.a
/usr/local/cuda-9.0/cudnnv7/lib64/libcudnn.so.7.1.4
/usr/local/cuda-9.0/cudnnv7/lib64/libcudnn_static.a
/usr/local/cuda-9.0/cudnnv705/lib64/libcudnn.so.7.0.5
/usr/local/cuda-9.0/cudnnv705/lib64/libcudnn_static.a

Versions of relevant libraries:
[pip3] numpy (1.14.3)
[pip3] numpydoc (0.7.0)
[pip3] torch (0.4.0)
[pip3] torchvision (0.2.0)
[conda] blas                      1.0                         mkl  
[conda] mkl                       2019.1                      144  
[conda] mkl_fft                   1.0.6            py37hd81dba3_0  
[conda] mkl_random                1.0.2            py37hd81dba3_0  
[conda] pytorch-nightly           1.0.0.dev20190111 py3.7_cuda9.0.176_cudnn7.4.1_0    pytorch
        Pillow (5.4.1)
2019-01-17 21:26:05,967 maskrcnn_benchmark INFO: Loaded configuration file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml
2019-01-17 21:26:05,967 maskrcnn_benchmark INFO: 
MODEL:
  META_ARCHITECTURE: "GeneralizedRCNN"
  WEIGHT: "catalog://ImageNetPretrained/MSRA/R-50"
  BACKBONE:
    CONV_BODY: "R-50-FPN"
    OUT_CHANNELS: 256
  RPN:
    USE_FPN: True
    ANCHOR_STRIDE: (4, 8, 16, 32, 64)
    PRE_NMS_TOP_N_TRAIN: 2000
    PRE_NMS_TOP_N_TEST: 1000
    POST_NMS_TOP_N_TEST: 1000
    FPN_POST_NMS_TOP_N_TEST: 1000
  ROI_HEADS:
    USE_FPN: True
  ROI_BOX_HEAD:
    POOLER_RESOLUTION: 7
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    POOLER_SAMPLING_RATIO: 2
    FEATURE_EXTRACTOR: "FPN2MLPFeatureExtractor"
    PREDICTOR: "FPNPredictor"
    NUM_CLASSES: 3
  ROI_MASK_HEAD:
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    FEATURE_EXTRACTOR: "MaskRCNNFPNFeatureExtractor"
    PREDICTOR: "MaskRCNNC4Predictor"
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 2
    RESOLUTION: 28
    SHARE_BOX_FEATURE_EXTRACTOR: False
  MASK_ON: True
DATASETS:
  TRAIN: ("coco_rectal_train",) #("coco_2014_train", "coco_2014_valminusminival")
  TEST: ("coco_rectal_test",) #("coco_2014_minival",)
  VAL: ( "coco_rectal_val",)
DATALOADER:
  SIZE_DIVISIBILITY: 32
SOLVER:
  BASE_LR: 0.02
  WEIGHT_DECAY: 0.0001
  STEPS: (480000, 640000) #(60000, 80000)
  MAX_ITER: 720000 #90000
  WARMUP_ITERS: 500
  CHECKPOINT_PERIOD: 1000

2019-01-17 21:26:05,968 maskrcnn_benchmark INFO: Running with config:
DATALOADER:
  ASPECT_RATIO_GROUPING: True
  NUM_WORKERS: 0
  SIZE_DIVISIBILITY: 32
DATASETS:
  TEST: ('coco_rectal_test',)
  TRAIN: ('coco_rectal_train',)
  VAL: ('coco_rectal_val',)
EVAL_THRESHOLD: 0.5
INPUT:
  BRIGHT_LB_TRAIN: 0.5
  CONTRAST_LB_TRAIN: 0.5
  FLIP_PROB_TRAIN: 0.5
  JITTER_PROB_TRAIN: 0.5
  MAX_SIZE_TEST: 256
  MAX_SIZE_TRAIN: 256
  MIN_SIZE_TEST: 256
  MIN_SIZE_TRAIN: 256
  PIXEL_MEAN: [30.8782232, 30.8782232, 30.8782232]
  PIXEL_STD: [1.0, 1.0, 1.0]
  TO_BGR255: True
MODEL:
  BACKBONE:
    CONV_BODY: R-50-FPN
    FREEZE_CONV_BODY_AT: 2
    OUT_CHANNELS: 256
  DEVICE: cuda
  MASK_ON: True
  META_ARCHITECTURE: GeneralizedRCNN
  RESNETS:
    NUM_GROUPS: 1
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_FUNC: StemWithFixedBatchNorm
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: True
    TRANS_FUNC: BottleneckWithFixedBatchNorm
    WIDTH_PER_GROUP: 64
  ROI_BOX_HEAD:
    FEATURE_EXTRACTOR: FPN2MLPFeatureExtractor
    MLP_HEAD_DIM: 1024
    NUM_CLASSES: 3
    POOLER_RESOLUTION: 7
    POOLER_SAMPLING_RATIO: 2
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    PREDICTOR: FPNPredictor
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    BBOX_REG_WEIGHTS: (10.0, 10.0, 5.0, 5.0)
    BG_IOU_THRESHOLD: 0.5
    DETECTIONS_PER_IMG: 100
    FG_IOU_THRESHOLD: 0.5
    NMS: 0.5
    POSITIVE_FRACTION: 0.25
    SCORE_THRESH: 0.05
    USE_FPN: True
  ROI_MASK_HEAD:
    CONV_LAYERS: (256, 256, 256, 256)
    FEATURE_EXTRACTOR: MaskRCNNFPNFeatureExtractor
    MLP_HEAD_DIM: 1024
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 2
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    POSTPROCESS_MASKS: False
    POSTPROCESS_MASKS_THRESHOLD: 0.5
    PREDICTOR: MaskRCNNC4Predictor
    RESOLUTION: 28
    SHARE_BOX_FEATURE_EXTRACTOR: False
  RPN:
    ANCHOR_SIZES: (32, 64, 128, 256, 512)
    ANCHOR_STRIDE: (4, 8, 16, 32, 64)
    ASPECT_RATIOS: (0.5, 1.0, 2.0)
    BATCH_SIZE_PER_IMAGE: 256
    BG_IOU_THRESHOLD: 0.3
    FG_IOU_THRESHOLD: 0.7
    FPN_POST_NMS_TOP_N_TEST: 1000
    FPN_POST_NMS_TOP_N_TRAIN: 2000
    MIN_SIZE: 0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOP_N_TEST: 1000
    POST_NMS_TOP_N_TRAIN: 2000
    PRE_NMS_TOP_N_TEST: 1000
    PRE_NMS_TOP_N_TRAIN: 2000
    RPN_HEAD: SingleConvRPNHead
    STRADDLE_THRESH: 0
    USE_FPN: True
  RPN_ONLY: False
  WEIGHT: catalog://ImageNetPretrained/MSRA/R-50
OUTPUT_DIR: ./logs/test/
PATHS_CATALOG: /home/r7user3/ZhangHT/github/maskrcnn-benchmark/maskrcnn_benchmark/config/paths_catalog.py
PATIENCE: 5
SOLVER:
  BASE_LR: 0.0001
  BIAS_LR_FACTOR: 2
  CHECKPOINT_PERIOD: 1000
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  MAX_ITER: 720000
  MOMENTUM: 0.9
  STEPS: (480000, 640000)
  WARMUP_FACTOR: 0.3333333333333333
  WARMUP_ITERS: 500
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: 0
TEST:
  EXPECTED_RESULTS: []
  EXPECTED_RESULTS_SIGMA_TOL: 4
  IMS_PER_BATCH: 4
2019-01-17 21:26:10,146 maskrcnn_benchmark.utils.checkpoint INFO: No checkpoint found. Initializing model from scratch
2019-01-17 21:26:10,146 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
2019-01-17 21:26:10,584 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
2019-01-17 21:26:10,594 maskrcnn_benchmark.trainer INFO: Start training
2019-01-17 21:26:42,710 maskrcnn_benchmark INFO: Using 2 GPUs
2019-01-17 21:26:42,711 maskrcnn_benchmark INFO: Namespace(config_file='configs/e2e_mask_rcnn_R_50_FPN_1x.yaml', distributed=True, local_rank=0, opts=['SOLVER.BASE_LR', '0.0001', 'SOLVER.IMS_PER_BATCH', '32', 'TEST.IMS_PER_BATCH', '4'], skip_test=False)
2019-01-17 21:26:42,711 maskrcnn_benchmark INFO: Collecting env info (might take some time)
2019-01-17 21:26:47,395 maskrcnn_benchmark INFO: 
PyTorch version: 1.0.0.dev20190111
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 5.2.0
CMake version: Could not collect

Python version: 3.7
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GT 710
GPU 1: Tesla K80
GPU 2: Tesla K80
GPU 3: Tesla K80
GPU 4: Tesla K80

Nvidia driver version: 390.87
cuDNN version: Probably one of the following:
/usr/local/MATLAB/R2018b/bin/glnxa64/libcudnn.so.7.1.2
/usr/local/cuda-8.0/cudnnv5.1.5_old/lib64/libcudnn.so.5.1.5
/usr/local/cuda-8.0/cudnnv5.1.5_old/lib64/libcudnn_static.a
/usr/local/cuda-8.0/cudnnv5/lib64/libcudnn.so.5.1.10
/usr/local/cuda-8.0/cudnnv5/lib64/libcudnn_static.a
/usr/local/cuda-8.0/cudnnv6/lib64/libcudnn.so.6.0.21
/usr/local/cuda-8.0/cudnnv6/lib64/libcudnn_static.a
/usr/local/cuda-8.0/cudnnv7/lib64/libcudnn.so.7.0.5
/usr/local/cuda-8.0/cudnnv7/lib64/libcudnn_static.a
/usr/local/cuda-9.0/cudnnv7/lib64/libcudnn.so.7.1.4
/usr/local/cuda-9.0/cudnnv7/lib64/libcudnn_static.a
/usr/local/cuda-9.0/cudnnv705/lib64/libcudnn.so.7.0.5
/usr/local/cuda-9.0/cudnnv705/lib64/libcudnn_static.a

Versions of relevant libraries:
[pip3] numpy (1.14.3)
[pip3] numpydoc (0.7.0)
[pip3] torch (0.4.0)
[pip3] torchvision (0.2.0)
[conda] blas                      1.0                         mkl  
[conda] mkl                       2019.1                      144  
[conda] mkl_fft                   1.0.6            py37hd81dba3_0  
[conda] mkl_random                1.0.2            py37hd81dba3_0  
[conda] pytorch-nightly           1.0.0.dev20190111 py3.7_cuda9.0.176_cudnn7.4.1_0    pytorch
        Pillow (5.4.1)
2019-01-17 21:26:47,395 maskrcnn_benchmark INFO: Loaded configuration file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml
2019-01-17 21:26:47,395 maskrcnn_benchmark INFO: 
MODEL:
  META_ARCHITECTURE: "GeneralizedRCNN"
  WEIGHT: "catalog://ImageNetPretrained/MSRA/R-50"
  BACKBONE:
    CONV_BODY: "R-50-FPN"
    OUT_CHANNELS: 256
  RPN:
    USE_FPN: True
    ANCHOR_STRIDE: (4, 8, 16, 32, 64)
    PRE_NMS_TOP_N_TRAIN: 2000
    PRE_NMS_TOP_N_TEST: 1000
    POST_NMS_TOP_N_TEST: 1000
    FPN_POST_NMS_TOP_N_TEST: 1000
  ROI_HEADS:
    USE_FPN: True
  ROI_BOX_HEAD:
    POOLER_RESOLUTION: 7
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    POOLER_SAMPLING_RATIO: 2
    FEATURE_EXTRACTOR: "FPN2MLPFeatureExtractor"
    PREDICTOR: "FPNPredictor"
    NUM_CLASSES: 3
  ROI_MASK_HEAD:
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    FEATURE_EXTRACTOR: "MaskRCNNFPNFeatureExtractor"
    PREDICTOR: "MaskRCNNC4Predictor"
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 2
    RESOLUTION: 28
    SHARE_BOX_FEATURE_EXTRACTOR: False
  MASK_ON: True
DATASETS:
  TRAIN: ("coco_rectal_train",) #("coco_2014_train", "coco_2014_valminusminival")
  TEST: ("coco_rectal_test",) #("coco_2014_minival",)
  VAL: ( "coco_rectal_val",)
DATALOADER:
  SIZE_DIVISIBILITY: 32
SOLVER:
  BASE_LR: 0.02
  WEIGHT_DECAY: 0.0001
  STEPS: (480000, 640000) #(60000, 80000)
  MAX_ITER: 720000 #90000
  WARMUP_ITERS: 500
  CHECKPOINT_PERIOD: 1000

2019-01-17 21:26:47,396 maskrcnn_benchmark INFO: Running with config:
DATALOADER:
  ASPECT_RATIO_GROUPING: True
  NUM_WORKERS: 0
  SIZE_DIVISIBILITY: 32
DATASETS:
  TEST: ('coco_rectal_test',)
  TRAIN: ('coco_rectal_train',)
  VAL: ('coco_rectal_val',)
EVAL_THRESHOLD: 0.5
INPUT:
  BRIGHT_LB_TRAIN: 0.5
  CONTRAST_LB_TRAIN: 0.5
  FLIP_PROB_TRAIN: 0.5
  JITTER_PROB_TRAIN: 0.5
  MAX_SIZE_TEST: 256
  MAX_SIZE_TRAIN: 256
  MIN_SIZE_TEST: 256
  MIN_SIZE_TRAIN: 256
  PIXEL_MEAN: [30.8782232, 30.8782232, 30.8782232]
  PIXEL_STD: [1.0, 1.0, 1.0]
  TO_BGR255: True
MODEL:
  BACKBONE:
    CONV_BODY: R-50-FPN
    FREEZE_CONV_BODY_AT: 2
    OUT_CHANNELS: 256
  DEVICE: cuda
  MASK_ON: True
  META_ARCHITECTURE: GeneralizedRCNN
  RESNETS:
    NUM_GROUPS: 1
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_FUNC: StemWithFixedBatchNorm
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: True
    TRANS_FUNC: BottleneckWithFixedBatchNorm
    WIDTH_PER_GROUP: 64
  ROI_BOX_HEAD:
    FEATURE_EXTRACTOR: FPN2MLPFeatureExtractor
    MLP_HEAD_DIM: 1024
    NUM_CLASSES: 3
    POOLER_RESOLUTION: 7
    POOLER_SAMPLING_RATIO: 2
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    PREDICTOR: FPNPredictor
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    BBOX_REG_WEIGHTS: (10.0, 10.0, 5.0, 5.0)
    BG_IOU_THRESHOLD: 0.5
    DETECTIONS_PER_IMG: 100
    FG_IOU_THRESHOLD: 0.5
    NMS: 0.5
    POSITIVE_FRACTION: 0.25
    SCORE_THRESH: 0.05
    USE_FPN: True
  ROI_MASK_HEAD:
    CONV_LAYERS: (256, 256, 256, 256)
    FEATURE_EXTRACTOR: MaskRCNNFPNFeatureExtractor
    MLP_HEAD_DIM: 1024
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 2
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    POSTPROCESS_MASKS: False
    POSTPROCESS_MASKS_THRESHOLD: 0.5
    PREDICTOR: MaskRCNNC4Predictor
    RESOLUTION: 28
    SHARE_BOX_FEATURE_EXTRACTOR: False
  RPN:
    ANCHOR_SIZES: (32, 64, 128, 256, 512)
    ANCHOR_STRIDE: (4, 8, 16, 32, 64)
    ASPECT_RATIOS: (0.5, 1.0, 2.0)
    BATCH_SIZE_PER_IMAGE: 256
    BG_IOU_THRESHOLD: 0.3
    FG_IOU_THRESHOLD: 0.7
    FPN_POST_NMS_TOP_N_TEST: 1000
    FPN_POST_NMS_TOP_N_TRAIN: 2000
    MIN_SIZE: 0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOP_N_TEST: 1000
    POST_NMS_TOP_N_TRAIN: 2000
    PRE_NMS_TOP_N_TEST: 1000
    PRE_NMS_TOP_N_TRAIN: 2000
    RPN_HEAD: SingleConvRPNHead
    STRADDLE_THRESH: 0
    USE_FPN: True
  RPN_ONLY: False
  WEIGHT: catalog://ImageNetPretrained/MSRA/R-50
OUTPUT_DIR: ./logs/test/
PATHS_CATALOG: /home/r7user3/ZhangHT/github/maskrcnn-benchmark/maskrcnn_benchmark/config/paths_catalog.py
PATIENCE: 5
SOLVER:
  BASE_LR: 0.0001
  BIAS_LR_FACTOR: 2
  CHECKPOINT_PERIOD: 1000
  GAMMA: 0.1
  IMS_PER_BATCH: 32
  MAX_ITER: 720000
  MOMENTUM: 0.9
  STEPS: (480000, 640000)
  WARMUP_FACTOR: 0.3333333333333333
  WARMUP_ITERS: 500
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: 0
TEST:
  EXPECTED_RESULTS: []
  EXPECTED_RESULTS_SIGMA_TOL: 4
  IMS_PER_BATCH: 4
2019-01-17 21:26:51,983 maskrcnn_benchmark.utils.checkpoint INFO: No checkpoint found. Initializing model from scratch
2019-01-17 21:26:51,984 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
2019-01-17 21:26:52,387 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
2019-01-17 21:26:52,523 maskrcnn_benchmark.trainer INFO: Start training
2019-01-17 21:28:22,103 maskrcnn_benchmark INFO: Using 2 GPUs
2019-01-17 21:28:22,104 maskrcnn_benchmark INFO: Namespace(config_file='configs/e2e_mask_rcnn_R_50_FPN_1x.yaml', distributed=True, local_rank=0, opts=['SOLVER.BASE_LR', '0.0001', 'SOLVER.IMS_PER_BATCH', '32', 'TEST.IMS_PER_BATCH', '4'], skip_test=False)
2019-01-17 21:28:22,104 maskrcnn_benchmark INFO: Collecting env info (might take some time)
2019-01-17 21:28:32,500 maskrcnn_benchmark INFO: Using 2 GPUs
2019-01-17 21:28:32,500 maskrcnn_benchmark INFO: Namespace(config_file='configs/e2e_mask_rcnn_R_50_FPN_1x.yaml', distributed=True, local_rank=0, opts=['SOLVER.BASE_LR', '0.0001', 'SOLVER.IMS_PER_BATCH', '64', 'TEST.IMS_PER_BATCH', '4'], skip_test=False)
2019-01-17 21:28:32,500 maskrcnn_benchmark INFO: Collecting env info (might take some time)
2019-01-17 21:28:36,227 maskrcnn_benchmark INFO: 
PyTorch version: 1.0.0.dev20190111
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 5.2.0
CMake version: Could not collect

Python version: 3.7
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GT 710
GPU 1: Tesla K80
GPU 2: Tesla K80
GPU 3: Tesla K80
GPU 4: Tesla K80

Nvidia driver version: 390.87
cuDNN version: Probably one of the following:
/usr/local/MATLAB/R2018b/bin/glnxa64/libcudnn.so.7.1.2
/usr/local/cuda-8.0/cudnnv5.1.5_old/lib64/libcudnn.so.5.1.5
/usr/local/cuda-8.0/cudnnv5.1.5_old/lib64/libcudnn_static.a
/usr/local/cuda-8.0/cudnnv5/lib64/libcudnn.so.5.1.10
/usr/local/cuda-8.0/cudnnv5/lib64/libcudnn_static.a
/usr/local/cuda-8.0/cudnnv6/lib64/libcudnn.so.6.0.21
/usr/local/cuda-8.0/cudnnv6/lib64/libcudnn_static.a
/usr/local/cuda-8.0/cudnnv7/lib64/libcudnn.so.7.0.5
/usr/local/cuda-8.0/cudnnv7/lib64/libcudnn_static.a
/usr/local/cuda-9.0/cudnnv7/lib64/libcudnn.so.7.1.4
/usr/local/cuda-9.0/cudnnv7/lib64/libcudnn_static.a
/usr/local/cuda-9.0/cudnnv705/lib64/libcudnn.so.7.0.5
/usr/local/cuda-9.0/cudnnv705/lib64/libcudnn_static.a

Versions of relevant libraries:
[pip3] numpy (1.14.3)
[pip3] numpydoc (0.7.0)
[pip3] torch (0.4.0)
[pip3] torchvision (0.2.0)
[conda] blas                      1.0                         mkl  
[conda] mkl                       2019.1                      144  
[conda] mkl_fft                   1.0.6            py37hd81dba3_0  
[conda] mkl_random                1.0.2            py37hd81dba3_0  
[conda] pytorch-nightly           1.0.0.dev20190111 py3.7_cuda9.0.176_cudnn7.4.1_0    pytorch
        Pillow (5.4.1)
2019-01-17 21:28:36,228 maskrcnn_benchmark INFO: Loaded configuration file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml
2019-01-17 21:28:36,228 maskrcnn_benchmark INFO: 
MODEL:
  META_ARCHITECTURE: "GeneralizedRCNN"
  WEIGHT: "catalog://ImageNetPretrained/MSRA/R-50"
  BACKBONE:
    CONV_BODY: "R-50-FPN"
    OUT_CHANNELS: 256
  RPN:
    USE_FPN: True
    ANCHOR_STRIDE: (4, 8, 16, 32, 64)
    PRE_NMS_TOP_N_TRAIN: 2000
    PRE_NMS_TOP_N_TEST: 1000
    POST_NMS_TOP_N_TEST: 1000
    FPN_POST_NMS_TOP_N_TEST: 1000
  ROI_HEADS:
    USE_FPN: True
  ROI_BOX_HEAD:
    POOLER_RESOLUTION: 7
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    POOLER_SAMPLING_RATIO: 2
    FEATURE_EXTRACTOR: "FPN2MLPFeatureExtractor"
    PREDICTOR: "FPNPredictor"
    NUM_CLASSES: 3
  ROI_MASK_HEAD:
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    FEATURE_EXTRACTOR: "MaskRCNNFPNFeatureExtractor"
    PREDICTOR: "MaskRCNNC4Predictor"
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 2
    RESOLUTION: 28
    SHARE_BOX_FEATURE_EXTRACTOR: False
  MASK_ON: True
DATASETS:
  TRAIN: ("coco_rectal_train",) #("coco_2014_train", "coco_2014_valminusminival")
  TEST: ("coco_rectal_test",) #("coco_2014_minival",)
  VAL: ( "coco_rectal_val",)
DATALOADER:
  SIZE_DIVISIBILITY: 32
SOLVER:
  BASE_LR: 0.02
  WEIGHT_DECAY: 0.0001
  STEPS: (480000, 640000) #(60000, 80000)
  MAX_ITER: 720000 #90000
  WARMUP_ITERS: 500
  CHECKPOINT_PERIOD: 1000

2019-01-17 21:28:36,230 maskrcnn_benchmark INFO: Running with config:
DATALOADER:
  ASPECT_RATIO_GROUPING: True
  NUM_WORKERS: 0
  SIZE_DIVISIBILITY: 32
DATASETS:
  TEST: ('coco_rectal_test',)
  TRAIN: ('coco_rectal_train',)
  VAL: ('coco_rectal_val',)
EVAL_THRESHOLD: 0.5
INPUT:
  BRIGHT_LB_TRAIN: 0.5
  CONTRAST_LB_TRAIN: 0.5
  FLIP_PROB_TRAIN: 0.5
  JITTER_PROB_TRAIN: 0.5
  MAX_SIZE_TEST: 256
  MAX_SIZE_TRAIN: 256
  MIN_SIZE_TEST: 256
  MIN_SIZE_TRAIN: 256
  PIXEL_MEAN: [30.8782232, 30.8782232, 30.8782232]
  PIXEL_STD: [1.0, 1.0, 1.0]
  TO_BGR255: True
MODEL:
  BACKBONE:
    CONV_BODY: R-50-FPN
    FREEZE_CONV_BODY_AT: 2
    OUT_CHANNELS: 256
  DEVICE: cuda
  MASK_ON: True
  META_ARCHITECTURE: GeneralizedRCNN
  RESNETS:
    NUM_GROUPS: 1
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_FUNC: StemWithFixedBatchNorm
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: True
    TRANS_FUNC: BottleneckWithFixedBatchNorm
    WIDTH_PER_GROUP: 64
  ROI_BOX_HEAD:
    FEATURE_EXTRACTOR: FPN2MLPFeatureExtractor
    MLP_HEAD_DIM: 1024
    NUM_CLASSES: 3
    POOLER_RESOLUTION: 7
    POOLER_SAMPLING_RATIO: 2
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    PREDICTOR: FPNPredictor
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    BBOX_REG_WEIGHTS: (10.0, 10.0, 5.0, 5.0)
    BG_IOU_THRESHOLD: 0.5
    DETECTIONS_PER_IMG: 100
    FG_IOU_THRESHOLD: 0.5
    NMS: 0.5
    POSITIVE_FRACTION: 0.25
    SCORE_THRESH: 0.05
    USE_FPN: True
  ROI_MASK_HEAD:
    CONV_LAYERS: (256, 256, 256, 256)
    FEATURE_EXTRACTOR: MaskRCNNFPNFeatureExtractor
    MLP_HEAD_DIM: 1024
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 2
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    POSTPROCESS_MASKS: False
    POSTPROCESS_MASKS_THRESHOLD: 0.5
    PREDICTOR: MaskRCNNC4Predictor
    RESOLUTION: 28
    SHARE_BOX_FEATURE_EXTRACTOR: False
  RPN:
    ANCHOR_SIZES: (32, 64, 128, 256, 512)
    ANCHOR_STRIDE: (4, 8, 16, 32, 64)
    ASPECT_RATIOS: (0.5, 1.0, 2.0)
    BATCH_SIZE_PER_IMAGE: 256
    BG_IOU_THRESHOLD: 0.3
    FG_IOU_THRESHOLD: 0.7
    FPN_POST_NMS_TOP_N_TEST: 1000
    FPN_POST_NMS_TOP_N_TRAIN: 2000
    MIN_SIZE: 0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOP_N_TEST: 1000
    POST_NMS_TOP_N_TRAIN: 2000
    PRE_NMS_TOP_N_TEST: 1000
    PRE_NMS_TOP_N_TRAIN: 2000
    RPN_HEAD: SingleConvRPNHead
    STRADDLE_THRESH: 0
    USE_FPN: True
  RPN_ONLY: False
  WEIGHT: catalog://ImageNetPretrained/MSRA/R-50
OUTPUT_DIR: ./logs/test/
PATHS_CATALOG: /home/r7user3/ZhangHT/github/maskrcnn-benchmark/maskrcnn_benchmark/config/paths_catalog.py
PATIENCE: 5
SOLVER:
  BASE_LR: 0.0001
  BIAS_LR_FACTOR: 2
  CHECKPOINT_PERIOD: 1000
  GAMMA: 0.1
  IMS_PER_BATCH: 64
  MAX_ITER: 720000
  MOMENTUM: 0.9
  STEPS: (480000, 640000)
  WARMUP_FACTOR: 0.3333333333333333
  WARMUP_ITERS: 500
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: 0
TEST:
  EXPECTED_RESULTS: []
  EXPECTED_RESULTS_SIGMA_TOL: 4
  IMS_PER_BATCH: 4
2019-01-17 21:28:40,902 maskrcnn_benchmark.utils.checkpoint INFO: No checkpoint found. Initializing model from scratch
2019-01-17 21:28:40,903 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
2019-01-17 21:28:41,272 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
2019-01-17 21:28:41,299 maskrcnn_benchmark.trainer INFO: Start training
2019-01-17 21:29:30,595 maskrcnn_benchmark.trainer INFO: eta: 20 days, 12:54:10  iter: 20  loss: 7.5322 (11.5465)  loss_box_reg: 0.0008 (0.0012)  loss_classifier: 0.1108 (0.1626)  loss_mask: 6.8203 (10.7306)  loss_objectness: 0.5975 (0.6000)  loss_rpn_box_reg: 0.0387 (0.0519)  time: 2.4552 (2.4646)  data: 0.2294 (0.2370)  lr: 0.000036  max mem: 5255
2019-01-17 21:30:20,510 maskrcnn_benchmark.trainer INFO: eta: 20 days, 16:00:29  iter: 40  loss: 3.8140 (7.7305)  loss_box_reg: 0.0001 (0.0008)  loss_classifier: 0.1817 (0.1647)  loss_mask: 3.1221 (6.9909)  loss_objectness: 0.4751 (0.5373)  loss_rpn_box_reg: 0.0208 (0.0369)  time: 2.4953 (2.4802)  data: 0.2375 (0.2373)  lr: 0.000039  max mem: 5256
2019-01-17 21:37:22,827 maskrcnn_benchmark INFO: Using 2 GPUs
2019-01-17 21:37:22,828 maskrcnn_benchmark INFO: Namespace(config_file='configs/e2e_mask_rcnn_R_50_FPN_1x.yaml', distributed=True, local_rank=0, opts=['SOLVER.BASE_LR', '0.001', 'SOLVER.IMS_PER_BATCH', '64', 'TEST.IMS_PER_BATCH', '4'], skip_test=False)
2019-01-17 21:37:22,828 maskrcnn_benchmark INFO: Collecting env info (might take some time)
2019-01-17 21:37:26,473 maskrcnn_benchmark INFO: 
PyTorch version: 1.0.0.dev20190111
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 5.2.0
CMake version: Could not collect

Python version: 3.7
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GT 710
GPU 1: Tesla K80
GPU 2: Tesla K80
GPU 3: Tesla K80
GPU 4: Tesla K80

Nvidia driver version: 390.87
cuDNN version: Probably one of the following:
/usr/local/MATLAB/R2018b/bin/glnxa64/libcudnn.so.7.1.2
/usr/local/cuda-8.0/cudnnv5.1.5_old/lib64/libcudnn.so.5.1.5
/usr/local/cuda-8.0/cudnnv5.1.5_old/lib64/libcudnn_static.a
/usr/local/cuda-8.0/cudnnv5/lib64/libcudnn.so.5.1.10
/usr/local/cuda-8.0/cudnnv5/lib64/libcudnn_static.a
/usr/local/cuda-8.0/cudnnv6/lib64/libcudnn.so.6.0.21
/usr/local/cuda-8.0/cudnnv6/lib64/libcudnn_static.a
/usr/local/cuda-8.0/cudnnv7/lib64/libcudnn.so.7.0.5
/usr/local/cuda-8.0/cudnnv7/lib64/libcudnn_static.a
/usr/local/cuda-9.0/cudnnv7/lib64/libcudnn.so.7.1.4
/usr/local/cuda-9.0/cudnnv7/lib64/libcudnn_static.a
/usr/local/cuda-9.0/cudnnv705/lib64/libcudnn.so.7.0.5
/usr/local/cuda-9.0/cudnnv705/lib64/libcudnn_static.a

Versions of relevant libraries:
[pip3] numpy (1.14.3)
[pip3] numpydoc (0.7.0)
[pip3] torch (0.4.0)
[pip3] torchvision (0.2.0)
[conda] blas                      1.0                         mkl  
[conda] mkl                       2019.1                      144  
[conda] mkl_fft                   1.0.6            py37hd81dba3_0  
[conda] mkl_random                1.0.2            py37hd81dba3_0  
[conda] pytorch-nightly           1.0.0.dev20190111 py3.7_cuda9.0.176_cudnn7.4.1_0    pytorch
        Pillow (5.4.1)
2019-01-17 21:37:26,473 maskrcnn_benchmark INFO: Loaded configuration file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml
2019-01-17 21:37:26,474 maskrcnn_benchmark INFO: 
MODEL:
  META_ARCHITECTURE: "GeneralizedRCNN"
  WEIGHT: "catalog://ImageNetPretrained/MSRA/R-50"
  BACKBONE:
    CONV_BODY: "R-50-FPN"
    OUT_CHANNELS: 256
  RPN:
    USE_FPN: True
    ANCHOR_STRIDE: (4, 8, 16, 32, 64)
    PRE_NMS_TOP_N_TRAIN: 2000
    PRE_NMS_TOP_N_TEST: 1000
    POST_NMS_TOP_N_TEST: 1000
    FPN_POST_NMS_TOP_N_TEST: 1000
  ROI_HEADS:
    USE_FPN: True
  ROI_BOX_HEAD:
    POOLER_RESOLUTION: 7
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    POOLER_SAMPLING_RATIO: 2
    FEATURE_EXTRACTOR: "FPN2MLPFeatureExtractor"
    PREDICTOR: "FPNPredictor"
    NUM_CLASSES: 3
  ROI_MASK_HEAD:
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    FEATURE_EXTRACTOR: "MaskRCNNFPNFeatureExtractor"
    PREDICTOR: "MaskRCNNC4Predictor"
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 2
    RESOLUTION: 28
    SHARE_BOX_FEATURE_EXTRACTOR: False
  MASK_ON: True
DATASETS:
  TRAIN: ("coco_rectal_train",) #("coco_2014_train", "coco_2014_valminusminival")
  TEST: ("coco_rectal_test",) #("coco_2014_minival",)
  VAL: ( "coco_rectal_val",)
DATALOADER:
  SIZE_DIVISIBILITY: 32
SOLVER:
  BASE_LR: 0.02
  WEIGHT_DECAY: 0.0001
  STEPS: (60000, 80000) #(480000, 640000) 
  MAX_ITER: 90000 #720000
  WARMUP_ITERS: 500
  CHECKPOINT_PERIOD: 1000

2019-01-17 21:37:26,475 maskrcnn_benchmark INFO: Running with config:
DATALOADER:
  ASPECT_RATIO_GROUPING: True
  NUM_WORKERS: 0
  SIZE_DIVISIBILITY: 32
DATASETS:
  TEST: ('coco_rectal_test',)
  TRAIN: ('coco_rectal_train',)
  VAL: ('coco_rectal_val',)
EVAL_THRESHOLD: 0.5
INPUT:
  BRIGHT_LB_TRAIN: 0.5
  CONTRAST_LB_TRAIN: 0.5
  FLIP_PROB_TRAIN: 0.5
  JITTER_PROB_TRAIN: 0.5
  MAX_SIZE_TEST: 256
  MAX_SIZE_TRAIN: 256
  MIN_SIZE_TEST: 256
  MIN_SIZE_TRAIN: 256
  PIXEL_MEAN: [30.8782232, 30.8782232, 30.8782232]
  PIXEL_STD: [1.0, 1.0, 1.0]
  TO_BGR255: True
MODEL:
  BACKBONE:
    CONV_BODY: R-50-FPN
    FREEZE_CONV_BODY_AT: 2
    OUT_CHANNELS: 256
  DEVICE: cuda
  MASK_ON: True
  META_ARCHITECTURE: GeneralizedRCNN
  RESNETS:
    NUM_GROUPS: 1
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_FUNC: StemWithFixedBatchNorm
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: True
    TRANS_FUNC: BottleneckWithFixedBatchNorm
    WIDTH_PER_GROUP: 64
  ROI_BOX_HEAD:
    FEATURE_EXTRACTOR: FPN2MLPFeatureExtractor
    MLP_HEAD_DIM: 1024
    NUM_CLASSES: 3
    POOLER_RESOLUTION: 7
    POOLER_SAMPLING_RATIO: 2
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    PREDICTOR: FPNPredictor
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    BBOX_REG_WEIGHTS: (10.0, 10.0, 5.0, 5.0)
    BG_IOU_THRESHOLD: 0.5
    DETECTIONS_PER_IMG: 100
    FG_IOU_THRESHOLD: 0.5
    NMS: 0.5
    POSITIVE_FRACTION: 0.25
    SCORE_THRESH: 0.05
    USE_FPN: True
  ROI_MASK_HEAD:
    CONV_LAYERS: (256, 256, 256, 256)
    FEATURE_EXTRACTOR: MaskRCNNFPNFeatureExtractor
    MLP_HEAD_DIM: 1024
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 2
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    POSTPROCESS_MASKS: False
    POSTPROCESS_MASKS_THRESHOLD: 0.5
    PREDICTOR: MaskRCNNC4Predictor
    RESOLUTION: 28
    SHARE_BOX_FEATURE_EXTRACTOR: False
  RPN:
    ANCHOR_SIZES: (32, 64, 128, 256, 512)
    ANCHOR_STRIDE: (4, 8, 16, 32, 64)
    ASPECT_RATIOS: (0.5, 1.0, 2.0)
    BATCH_SIZE_PER_IMAGE: 256
    BG_IOU_THRESHOLD: 0.3
    FG_IOU_THRESHOLD: 0.7
    FPN_POST_NMS_TOP_N_TEST: 1000
    FPN_POST_NMS_TOP_N_TRAIN: 2000
    MIN_SIZE: 0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOP_N_TEST: 1000
    POST_NMS_TOP_N_TRAIN: 2000
    PRE_NMS_TOP_N_TEST: 1000
    PRE_NMS_TOP_N_TRAIN: 2000
    RPN_HEAD: SingleConvRPNHead
    STRADDLE_THRESH: 0
    USE_FPN: True
  RPN_ONLY: False
  WEIGHT: catalog://ImageNetPretrained/MSRA/R-50
OUTPUT_DIR: ./logs/test/
PATHS_CATALOG: /home/r7user3/ZhangHT/github/maskrcnn-benchmark/maskrcnn_benchmark/config/paths_catalog.py
PATIENCE: 5
SOLVER:
  BASE_LR: 0.001
  BIAS_LR_FACTOR: 2
  CHECKPOINT_PERIOD: 1000
  GAMMA: 0.1
  IMS_PER_BATCH: 64
  MAX_ITER: 90000
  MOMENTUM: 0.9
  STEPS: (60000, 80000)
  WARMUP_FACTOR: 0.3333333333333333
  WARMUP_ITERS: 500
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: 0
TEST:
  EXPECTED_RESULTS: []
  EXPECTED_RESULTS_SIGMA_TOL: 4
  IMS_PER_BATCH: 4
2019-01-17 21:37:31,061 maskrcnn_benchmark.utils.checkpoint INFO: No checkpoint found. Initializing model from scratch
2019-01-17 21:37:31,062 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
2019-01-17 21:37:31,418 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
2019-01-17 21:37:31,451 maskrcnn_benchmark.trainer INFO: Start training
2019-01-17 21:38:20,429 maskrcnn_benchmark.trainer INFO: eta: 2 days, 13:12:11  iter: 20  loss: 68.5468 (86.9572)  loss_box_reg: 0.0006 (0.0010)  loss_classifier: 0.1834 (0.2346)  loss_mask: 67.8453 (86.2341)  loss_objectness: 0.3335 (0.4385)  loss_rpn_box_reg: 0.0451 (0.0490)  time: 2.4380 (2.4487)  data: 0.2044 (0.2091)  lr: 0.000359  max mem: 5255
2019-01-17 21:38:54,560 maskrcnn_benchmark INFO: Using 2 GPUs
2019-01-17 21:38:54,560 maskrcnn_benchmark INFO: Namespace(config_file='configs/e2e_mask_rcnn_R_50_FPN_1x.yaml', distributed=True, local_rank=0, opts=['SOLVER.BASE_LR', '0.0001', 'SOLVER.IMS_PER_BATCH', '64', 'TEST.IMS_PER_BATCH', '4'], skip_test=False)
2019-01-17 21:38:54,560 maskrcnn_benchmark INFO: Collecting env info (might take some time)
2019-01-17 21:38:58,469 maskrcnn_benchmark INFO: 
PyTorch version: 1.0.0.dev20190111
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 5.2.0
CMake version: Could not collect

Python version: 3.7
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GT 710
GPU 1: Tesla K80
GPU 2: Tesla K80
GPU 3: Tesla K80
GPU 4: Tesla K80

Nvidia driver version: 390.87
cuDNN version: Probably one of the following:
/usr/local/MATLAB/R2018b/bin/glnxa64/libcudnn.so.7.1.2
/usr/local/cuda-8.0/cudnnv5.1.5_old/lib64/libcudnn.so.5.1.5
/usr/local/cuda-8.0/cudnnv5.1.5_old/lib64/libcudnn_static.a
/usr/local/cuda-8.0/cudnnv5/lib64/libcudnn.so.5.1.10
/usr/local/cuda-8.0/cudnnv5/lib64/libcudnn_static.a
/usr/local/cuda-8.0/cudnnv6/lib64/libcudnn.so.6.0.21
/usr/local/cuda-8.0/cudnnv6/lib64/libcudnn_static.a
/usr/local/cuda-8.0/cudnnv7/lib64/libcudnn.so.7.0.5
/usr/local/cuda-8.0/cudnnv7/lib64/libcudnn_static.a
/usr/local/cuda-9.0/cudnnv7/lib64/libcudnn.so.7.1.4
/usr/local/cuda-9.0/cudnnv7/lib64/libcudnn_static.a
/usr/local/cuda-9.0/cudnnv705/lib64/libcudnn.so.7.0.5
/usr/local/cuda-9.0/cudnnv705/lib64/libcudnn_static.a

Versions of relevant libraries:
[pip3] numpy (1.14.3)
[pip3] numpydoc (0.7.0)
[pip3] torch (0.4.0)
[pip3] torchvision (0.2.0)
[conda] blas                      1.0                         mkl  
[conda] mkl                       2019.1                      144  
[conda] mkl_fft                   1.0.6            py37hd81dba3_0  
[conda] mkl_random                1.0.2            py37hd81dba3_0  
[conda] pytorch-nightly           1.0.0.dev20190111 py3.7_cuda9.0.176_cudnn7.4.1_0    pytorch
        Pillow (5.4.1)
2019-01-17 21:38:58,470 maskrcnn_benchmark INFO: Loaded configuration file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml
2019-01-17 21:38:58,470 maskrcnn_benchmark INFO: 
MODEL:
  META_ARCHITECTURE: "GeneralizedRCNN"
  WEIGHT: "catalog://ImageNetPretrained/MSRA/R-50"
  BACKBONE:
    CONV_BODY: "R-50-FPN"
    OUT_CHANNELS: 256
  RPN:
    USE_FPN: True
    ANCHOR_STRIDE: (4, 8, 16, 32, 64)
    PRE_NMS_TOP_N_TRAIN: 2000
    PRE_NMS_TOP_N_TEST: 1000
    POST_NMS_TOP_N_TEST: 1000
    FPN_POST_NMS_TOP_N_TEST: 1000
  ROI_HEADS:
    USE_FPN: True
  ROI_BOX_HEAD:
    POOLER_RESOLUTION: 7
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    POOLER_SAMPLING_RATIO: 2
    FEATURE_EXTRACTOR: "FPN2MLPFeatureExtractor"
    PREDICTOR: "FPNPredictor"
    NUM_CLASSES: 3
  ROI_MASK_HEAD:
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    FEATURE_EXTRACTOR: "MaskRCNNFPNFeatureExtractor"
    PREDICTOR: "MaskRCNNC4Predictor"
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 2
    RESOLUTION: 28
    SHARE_BOX_FEATURE_EXTRACTOR: False
  MASK_ON: True
DATASETS:
  TRAIN: ("coco_rectal_train",) #("coco_2014_train", "coco_2014_valminusminival")
  TEST: ("coco_rectal_test",) #("coco_2014_minival",)
  VAL: ( "coco_rectal_val",)
DATALOADER:
  SIZE_DIVISIBILITY: 32
SOLVER:
  BASE_LR: 0.02
  WEIGHT_DECAY: 0.0001
  STEPS: (60000, 80000) #(480000, 640000) 
  MAX_ITER: 90000 #720000
  WARMUP_ITERS: 500
  CHECKPOINT_PERIOD: 1000

2019-01-17 21:38:58,471 maskrcnn_benchmark INFO: Running with config:
DATALOADER:
  ASPECT_RATIO_GROUPING: True
  NUM_WORKERS: 0
  SIZE_DIVISIBILITY: 32
DATASETS:
  TEST: ('coco_rectal_test',)
  TRAIN: ('coco_rectal_train',)
  VAL: ('coco_rectal_val',)
EVAL_THRESHOLD: 0.5
INPUT:
  BRIGHT_LB_TRAIN: 0.5
  CONTRAST_LB_TRAIN: 0.5
  FLIP_PROB_TRAIN: 0.5
  JITTER_PROB_TRAIN: 0.5
  MAX_SIZE_TEST: 256
  MAX_SIZE_TRAIN: 256
  MIN_SIZE_TEST: 256
  MIN_SIZE_TRAIN: 256
  PIXEL_MEAN: [30.8782232, 30.8782232, 30.8782232]
  PIXEL_STD: [1.0, 1.0, 1.0]
  TO_BGR255: True
MODEL:
  BACKBONE:
    CONV_BODY: R-50-FPN
    FREEZE_CONV_BODY_AT: 2
    OUT_CHANNELS: 256
  DEVICE: cuda
  MASK_ON: True
  META_ARCHITECTURE: GeneralizedRCNN
  RESNETS:
    NUM_GROUPS: 1
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_FUNC: StemWithFixedBatchNorm
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: True
    TRANS_FUNC: BottleneckWithFixedBatchNorm
    WIDTH_PER_GROUP: 64
  ROI_BOX_HEAD:
    FEATURE_EXTRACTOR: FPN2MLPFeatureExtractor
    MLP_HEAD_DIM: 1024
    NUM_CLASSES: 3
    POOLER_RESOLUTION: 7
    POOLER_SAMPLING_RATIO: 2
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    PREDICTOR: FPNPredictor
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    BBOX_REG_WEIGHTS: (10.0, 10.0, 5.0, 5.0)
    BG_IOU_THRESHOLD: 0.5
    DETECTIONS_PER_IMG: 100
    FG_IOU_THRESHOLD: 0.5
    NMS: 0.5
    POSITIVE_FRACTION: 0.25
    SCORE_THRESH: 0.05
    USE_FPN: True
  ROI_MASK_HEAD:
    CONV_LAYERS: (256, 256, 256, 256)
    FEATURE_EXTRACTOR: MaskRCNNFPNFeatureExtractor
    MLP_HEAD_DIM: 1024
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 2
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    POSTPROCESS_MASKS: False
    POSTPROCESS_MASKS_THRESHOLD: 0.5
    PREDICTOR: MaskRCNNC4Predictor
    RESOLUTION: 28
    SHARE_BOX_FEATURE_EXTRACTOR: False
  RPN:
    ANCHOR_SIZES: (32, 64, 128, 256, 512)
    ANCHOR_STRIDE: (4, 8, 16, 32, 64)
    ASPECT_RATIOS: (0.5, 1.0, 2.0)
    BATCH_SIZE_PER_IMAGE: 256
    BG_IOU_THRESHOLD: 0.3
    FG_IOU_THRESHOLD: 0.7
    FPN_POST_NMS_TOP_N_TEST: 1000
    FPN_POST_NMS_TOP_N_TRAIN: 2000
    MIN_SIZE: 0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOP_N_TEST: 1000
    POST_NMS_TOP_N_TRAIN: 2000
    PRE_NMS_TOP_N_TEST: 1000
    PRE_NMS_TOP_N_TRAIN: 2000
    RPN_HEAD: SingleConvRPNHead
    STRADDLE_THRESH: 0
    USE_FPN: True
  RPN_ONLY: False
  WEIGHT: catalog://ImageNetPretrained/MSRA/R-50
OUTPUT_DIR: ./logs/test/
PATHS_CATALOG: /home/r7user3/ZhangHT/github/maskrcnn-benchmark/maskrcnn_benchmark/config/paths_catalog.py
PATIENCE: 5
SOLVER:
  BASE_LR: 0.0001
  BIAS_LR_FACTOR: 2
  CHECKPOINT_PERIOD: 1000
  GAMMA: 0.1
  IMS_PER_BATCH: 64
  MAX_ITER: 90000
  MOMENTUM: 0.9
  STEPS: (60000, 80000)
  WARMUP_FACTOR: 0.3333333333333333
  WARMUP_ITERS: 500
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: 0
TEST:
  EXPECTED_RESULTS: []
  EXPECTED_RESULTS_SIGMA_TOL: 4
  IMS_PER_BATCH: 4
2019-01-17 21:39:02,415 maskrcnn_benchmark.utils.checkpoint INFO: No checkpoint found. Initializing model from scratch
2019-01-17 21:39:02,416 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
2019-01-17 21:39:02,806 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
2019-01-17 21:39:02,918 maskrcnn_benchmark.trainer INFO: Start training
2019-01-17 21:39:51,344 maskrcnn_benchmark.trainer INFO: eta: 2 days, 12:30:53  iter: 20  loss: 5.4400 (6.7489)  loss_box_reg: 0.0009 (0.0013)  loss_classifier: 0.0742 (0.1073)  loss_mask: 4.6268 (5.9496)  loss_objectness: 0.6642 (0.6612)  loss_rpn_box_reg: 0.0298 (0.0296)  time: 2.4266 (2.4211)  data: 0.2017 (0.2100)  lr: 0.000036  max mem: 5256
2019-01-17 21:40:40,884 maskrcnn_benchmark.trainer INFO: eta: 2 days, 13:11:57  iter: 40  loss: 2.8687 (4.8271)  loss_box_reg: 0.0001 (0.0007)  loss_classifier: 0.0666 (0.0872)  loss_mask: 2.2771 (4.1346)  loss_objectness: 0.4876 (0.5788)  loss_rpn_box_reg: 0.0204 (0.0257)  time: 2.4618 (2.4491)  data: 0.2086 (0.2117)  lr: 0.000039  max mem: 5256
2019-01-17 21:41:30,637 maskrcnn_benchmark.trainer INFO: eta: 2 days, 13:30:26  iter: 60  loss: 2.0319 (3.9066)  loss_box_reg: 0.0000 (0.0005)  loss_classifier: 0.2206 (0.1269)  loss_mask: 1.4166 (3.2373)  loss_objectness: 0.3926 (0.5178)  loss_rpn_box_reg: 0.0180 (0.0242)  time: 2.4850 (2.4619)  data: 0.2105 (0.2112)  lr: 0.000041  max mem: 5256
2019-01-17 21:42:20,306 maskrcnn_benchmark.trainer INFO: eta: 2 days, 13:37:40  iter: 80  loss: 1.6307 (3.3537)  loss_box_reg: 0.0000 (0.0004)  loss_classifier: 0.1723 (0.1423)  loss_mask: 1.1253 (2.7175)  loss_objectness: 0.3298 (0.4709)  loss_rpn_box_reg: 0.0165 (0.0227)  time: 2.4831 (2.4673)  data: 0.2002 (0.2086)  lr: 0.000044  max mem: 5256
2019-01-17 21:43:10,016 maskrcnn_benchmark.trainer INFO: eta: 2 days, 13:42:18  iter: 100  loss: 1.4286 (2.9662)  loss_box_reg: 0.0000 (0.0003)  loss_classifier: 0.1089 (0.1360)  loss_mask: 1.0067 (2.3751)  loss_objectness: 0.2809 (0.4332)  loss_rpn_box_reg: 0.0156 (0.0216)  time: 2.4833 (2.4709)  data: 0.1933 (0.2060)  lr: 0.000047  max mem: 5256
2019-01-17 21:43:59,858 maskrcnn_benchmark.trainer INFO: eta: 2 days, 13:46:45  iter: 120  loss: 1.3080 (2.6884)  loss_box_reg: 0.0000 (0.0003)  loss_classifier: 0.0861 (0.1281)  loss_mask: 0.9536 (2.1364)  loss_objectness: 0.2503 (0.4028)  loss_rpn_box_reg: 0.0154 (0.0208)  time: 2.4904 (2.4745)  data: 0.2109 (0.2067)  lr: 0.000049  max mem: 5256
2019-01-17 21:44:49,415 maskrcnn_benchmark.trainer INFO: eta: 2 days, 13:46:39  iter: 140  loss: 1.1950 (2.4756)  loss_box_reg: 0.0000 (0.0002)  loss_classifier: 0.0706 (0.1200)  loss_mask: 0.8819 (1.9580)  loss_objectness: 0.2222 (0.3773)  loss_rpn_box_reg: 0.0155 (0.0202)  time: 2.4732 (2.4750)  data: 0.1983 (0.2060)  lr: 0.000052  max mem: 5256
2019-01-17 21:45:39,524 maskrcnn_benchmark.trainer INFO: eta: 2 days, 13:51:32  iter: 160  loss: 1.1307 (2.3067)  loss_box_reg: 0.0000 (0.0002)  loss_classifier: 0.0519 (0.1118)  loss_mask: 0.8419 (1.8204)  loss_objectness: 0.1967 (0.3550)  loss_rpn_box_reg: 0.0124 (0.0194)  time: 2.4898 (2.4788)  data: 0.2009 (0.2058)  lr: 0.000055  max mem: 5256
2019-01-17 21:46:29,730 maskrcnn_benchmark.trainer INFO: eta: 2 days, 13:55:57  iter: 180  loss: 1.0457 (2.1681)  loss_box_reg: 0.0000 (0.0002)  loss_classifier: 0.0462 (0.1045)  loss_mask: 0.8052 (1.7084)  loss_objectness: 0.1857 (0.3362)  loss_rpn_box_reg: 0.0130 (0.0188)  time: 2.4997 (2.4823)  data: 0.2025 (0.2058)  lr: 0.000057  max mem: 5256
2019-01-17 21:47:19,844 maskrcnn_benchmark.trainer INFO: eta: 2 days, 13:58:38  iter: 200  loss: 1.0213 (2.0539)  loss_box_reg: 0.0000 (0.0002)  loss_classifier: 0.0391 (0.0980)  loss_mask: 0.7879 (1.6174)  loss_objectness: 0.1687 (0.3200)  loss_rpn_box_reg: 0.0119 (0.0184)  time: 2.4988 (2.4846)  data: 0.2089 (0.2064)  lr: 0.000060  max mem: 5256
2019-01-17 21:48:09,629 maskrcnn_benchmark.trainer INFO: eta: 2 days, 13:58:26  iter: 220  loss: 0.9672 (1.9551)  loss_box_reg: 0.0000 (0.0001)  loss_classifier: 0.0332 (0.0921)  loss_mask: 0.7548 (1.5389)  loss_objectness: 0.1615 (0.3058)  loss_rpn_box_reg: 0.0145 (0.0182)  time: 2.4911 (2.4850)  data: 0.2000 (0.2057)  lr: 0.000063  max mem: 5256
2019-01-17 21:48:59,485 maskrcnn_benchmark.trainer INFO: eta: 2 days, 13:58:34  iter: 240  loss: 0.9361 (1.8719)  loss_box_reg: 0.0000 (0.0001)  loss_classifier: 0.0304 (0.0870)  loss_mask: 0.7326 (1.4735)  loss_objectness: 0.1537 (0.2933)  loss_rpn_box_reg: 0.0134 (0.0179)  time: 2.4935 (2.4857)  data: 0.1970 (0.2055)  lr: 0.000065  max mem: 5256
2019-01-17 21:49:49,367 maskrcnn_benchmark.trainer INFO: eta: 2 days, 13:58:43  iter: 260  loss: 0.9132 (1.7984)  loss_box_reg: 0.0000 (0.0001)  loss_classifier: 0.0261 (0.0824)  loss_mask: 0.7240 (1.4161)  loss_objectness: 0.1462 (0.2820)  loss_rpn_box_reg: 0.0145 (0.0178)  time: 2.4907 (2.4863)  data: 0.2075 (0.2057)  lr: 0.000068  max mem: 5256
2019-01-17 21:50:39,426 maskrcnn_benchmark.trainer INFO: eta: 2 days, 13:59:40  iter: 280  loss: 0.8794 (1.7330)  loss_box_reg: 0.0000 (0.0001)  loss_classifier: 0.0230 (0.0782)  loss_mask: 0.7015 (1.3657)  loss_objectness: 0.1362 (0.2714)  loss_rpn_box_reg: 0.0125 (0.0176)  time: 2.5008 (2.4875)  data: 0.2158 (0.2063)  lr: 0.000071  max mem: 5256
2019-01-17 21:51:29,685 maskrcnn_benchmark.trainer INFO: eta: 2 days, 14:01:22  iter: 300  loss: 0.8558 (1.6742)  loss_box_reg: 0.0000 (0.0001)  loss_classifier: 0.0214 (0.0744)  loss_mask: 0.6872 (1.3203)  loss_objectness: 0.1286 (0.2619)  loss_rpn_box_reg: 0.0142 (0.0174)  time: 2.5035 (2.4892)  data: 0.1936 (0.2057)  lr: 0.000073  max mem: 5256
2019-01-17 21:52:19,568 maskrcnn_benchmark.trainer INFO: eta: 2 days, 14:01:00  iter: 320  loss: 0.8271 (1.6219)  loss_box_reg: 0.0000 (0.0001)  loss_classifier: 0.0193 (0.0710)  loss_mask: 0.6756 (1.2807)  loss_objectness: 0.1156 (0.2529)  loss_rpn_box_reg: 0.0127 (0.0172)  time: 2.4891 (2.4895)  data: 0.1982 (0.2053)  lr: 0.000076  max mem: 5256
2019-01-17 21:53:09,388 maskrcnn_benchmark.trainer INFO: eta: 2 days, 14:00:18  iter: 340  loss: 0.8222 (1.5758)  loss_box_reg: 0.0000 (0.0001)  loss_classifier: 0.0171 (0.0679)  loss_mask: 0.6815 (1.2463)  loss_objectness: 0.1102 (0.2446)  loss_rpn_box_reg: 0.0136 (0.0169)  time: 2.4821 (2.4896)  data: 0.2137 (0.2058)  lr: 0.000079  max mem: 5256
2019-01-17 21:53:59,624 maskrcnn_benchmark.trainer INFO: eta: 2 days, 14:01:18  iter: 360  loss: 0.8007 (1.5337)  loss_box_reg: 0.0000 (0.0001)  loss_classifier: 0.0176 (0.0651)  loss_mask: 0.6650 (1.2145)  loss_objectness: 0.1114 (0.2371)  loss_rpn_box_reg: 0.0145 (0.0169)  time: 2.4990 (2.4908)  data: 0.2202 (0.2066)  lr: 0.000081  max mem: 5256
2019-01-17 21:54:49,825 maskrcnn_benchmark.trainer INFO: eta: 2 days, 14:01:59  iter: 380  loss: 0.7848 (1.4950)  loss_box_reg: 0.0000 (0.0001)  loss_classifier: 0.0156 (0.0625)  loss_mask: 0.6539 (1.1857)  loss_objectness: 0.1021 (0.2300)  loss_rpn_box_reg: 0.0135 (0.0167)  time: 2.5149 (2.4919)  data: 0.2194 (0.2069)  lr: 0.000084  max mem: 5256
2019-01-17 21:55:40,560 maskrcnn_benchmark.trainer INFO: eta: 2 days, 14:04:31  iter: 400  loss: 0.7960 (1.4604)  loss_box_reg: 0.0000 (0.0001)  loss_classifier: 0.0139 (0.0600)  loss_mask: 0.6669 (1.1604)  loss_objectness: 0.0948 (0.2233)  loss_rpn_box_reg: 0.0141 (0.0165)  time: 2.5219 (2.4941)  data: 0.2067 (0.2074)  lr: 0.000087  max mem: 5256
2019-01-17 21:56:31,145 maskrcnn_benchmark.trainer INFO: eta: 2 days, 14:06:11  iter: 420  loss: 0.7735 (1.4281)  loss_box_reg: 0.0000 (0.0001)  loss_classifier: 0.0123 (0.0578)  loss_mask: 0.6552 (1.1366)  loss_objectness: 0.0910 (0.2172)  loss_rpn_box_reg: 0.0130 (0.0164)  time: 2.5106 (2.4958)  data: 0.1955 (0.2067)  lr: 0.000089  max mem: 5256
2019-01-17 21:57:21,122 maskrcnn_benchmark.trainer INFO: eta: 2 days, 14:05:33  iter: 440  loss: 0.7488 (1.3976)  loss_box_reg: 0.0000 (0.0001)  loss_classifier: 0.0140 (0.0558)  loss_mask: 0.6455 (1.1140)  loss_objectness: 0.0930 (0.2114)  loss_rpn_box_reg: 0.0126 (0.0163)  time: 2.5017 (2.4959)  data: 0.1755 (0.2055)  lr: 0.000092  max mem: 5256
2019-01-17 21:58:11,908 maskrcnn_benchmark.trainer INFO: eta: 2 days, 14:07:32  iter: 460  loss: 0.7560 (1.3699)  loss_box_reg: 0.0000 (0.0001)  loss_classifier: 0.0171 (0.0542)  loss_mask: 0.6435 (1.0934)  loss_objectness: 0.0877 (0.2061)  loss_rpn_box_reg: 0.0135 (0.0162)  time: 2.5322 (2.4978)  data: 0.2168 (0.2057)  lr: 0.000095  max mem: 5256
2019-01-17 21:59:02,164 maskrcnn_benchmark.trainer INFO: eta: 2 days, 14:07:38  iter: 480  loss: 0.7520 (1.3441)  loss_box_reg: 0.0000 (0.0001)  loss_classifier: 0.0150 (0.0526)  loss_mask: 0.6374 (1.0745)  loss_objectness: 0.0816 (0.2009)  loss_rpn_box_reg: 0.0131 (0.0161)  time: 2.5000 (2.4984)  data: 0.2011 (0.2059)  lr: 0.000097  max mem: 5256
2019-01-17 21:59:52,316 maskrcnn_benchmark.trainer INFO: eta: 2 days, 14:07:21  iter: 500  loss: 0.7759 (1.3212)  loss_box_reg: 0.0012 (0.0001)  loss_classifier: 0.0189 (0.0512)  loss_mask: 0.6511 (1.0578)  loss_objectness: 0.0794 (0.1962)  loss_rpn_box_reg: 0.0120 (0.0159)  time: 2.5040 (2.4988)  data: 0.2026 (0.2059)  lr: 0.000100  max mem: 5256
2019-01-17 22:00:43,006 maskrcnn_benchmark.trainer INFO: eta: 2 days, 14:08:34  iter: 520  loss: 0.7618 (1.3002)  loss_box_reg: 0.0012 (0.0002)  loss_classifier: 0.0191 (0.0500)  loss_mask: 0.6517 (1.0425)  loss_objectness: 0.0797 (0.1917)  loss_rpn_box_reg: 0.0119 (0.0158)  time: 2.5131 (2.5002)  data: 0.1935 (0.2056)  lr: 0.000100  max mem: 5256
2019-01-17 22:01:33,642 maskrcnn_benchmark.trainer INFO: eta: 2 days, 14:09:29  iter: 540  loss: 0.7258 (1.2793)  loss_box_reg: 0.0016 (0.0003)  loss_classifier: 0.0200 (0.0489)  loss_mask: 0.6159 (1.0271)  loss_objectness: 0.0737 (0.1874)  loss_rpn_box_reg: 0.0111 (0.0157)  time: 2.5152 (2.5013)  data: 0.1999 (0.2055)  lr: 0.000100  max mem: 5256
2019-01-17 22:02:23,723 maskrcnn_benchmark.trainer INFO: eta: 2 days, 14:08:47  iter: 560  loss: 0.7386 (1.2602)  loss_box_reg: 0.0015 (0.0003)  loss_classifier: 0.0168 (0.0478)  loss_mask: 0.6227 (1.0130)  loss_objectness: 0.0751 (0.1835)  loss_rpn_box_reg: 0.0131 (0.0156)  time: 2.4935 (2.5014)  data: 0.2031 (0.2055)  lr: 0.000100  max mem: 5256
2019-01-17 22:03:14,191 maskrcnn_benchmark.trainer INFO: eta: 2 days, 14:09:05  iter: 580  loss: 0.7534 (1.2427)  loss_box_reg: 0.0033 (0.0005)  loss_classifier: 0.0232 (0.0469)  loss_mask: 0.6331 (1.0000)  loss_objectness: 0.0726 (0.1798)  loss_rpn_box_reg: 0.0119 (0.0155)  time: 2.5131 (2.5022)  data: 0.1866 (0.2052)  lr: 0.000100  max mem: 5256
2019-01-17 22:04:03,955 maskrcnn_benchmark.trainer INFO: eta: 2 days, 14:07:33  iter: 600  loss: 0.7339 (1.2258)  loss_box_reg: 0.0027 (0.0005)  loss_classifier: 0.0208 (0.0460)  loss_mask: 0.6287 (0.9878)  loss_objectness: 0.0670 (0.1761)  loss_rpn_box_reg: 0.0114 (0.0154)  time: 2.4901 (2.5017)  data: 0.1990 (0.2050)  lr: 0.000100  max mem: 5256
2019-01-17 22:04:54,413 maskrcnn_benchmark.trainer INFO: eta: 2 days, 14:07:44  iter: 620  loss: 0.7372 (1.2100)  loss_box_reg: 0.0031 (0.0006)  loss_classifier: 0.0211 (0.0453)  loss_mask: 0.6211 (0.9761)  loss_objectness: 0.0712 (0.1727)  loss_rpn_box_reg: 0.0121 (0.0153)  time: 2.5206 (2.5024)  data: 0.1927 (0.2049)  lr: 0.000100  max mem: 5256
2019-01-17 22:05:45,118 maskrcnn_benchmark.trainer INFO: eta: 2 days, 14:08:26  iter: 640  loss: 0.7449 (1.1955)  loss_box_reg: 0.0052 (0.0008)  loss_classifier: 0.0287 (0.0447)  loss_mask: 0.6230 (0.9652)  loss_objectness: 0.0693 (0.1695)  loss_rpn_box_reg: 0.0120 (0.0152)  time: 2.5197 (2.5034)  data: 0.1917 (0.2046)  lr: 0.000100  max mem: 5256
2019-01-17 22:06:35,688 maskrcnn_benchmark.trainer INFO: eta: 2 days, 14:08:44  iter: 660  loss: 0.7486 (1.1821)  loss_box_reg: 0.0044 (0.0009)  loss_classifier: 0.0216 (0.0441)  loss_mask: 0.6374 (0.9555)  loss_objectness: 0.0667 (0.1665)  loss_rpn_box_reg: 0.0116 (0.0152)  time: 2.5242 (2.5042)  data: 0.1935 (0.2044)  lr: 0.000100  max mem: 5256
2019-01-17 22:07:25,583 maskrcnn_benchmark.trainer INFO: eta: 2 days, 14:07:29  iter: 680  loss: 0.7325 (1.1695)  loss_box_reg: 0.0038 (0.0010)  loss_classifier: 0.0231 (0.0435)  loss_mask: 0.6315 (0.9462)  loss_objectness: 0.0669 (0.1637)  loss_rpn_box_reg: 0.0130 (0.0151)  time: 2.4851 (2.5039)  data: 0.2036 (0.2044)  lr: 0.000100  max mem: 5256
2019-01-17 22:08:16,419 maskrcnn_benchmark.trainer INFO: eta: 2 days, 14:08:16  iter: 700  loss: 0.7138 (1.1570)  loss_box_reg: 0.0067 (0.0012)  loss_classifier: 0.0284 (0.0430)  loss_mask: 0.6123 (0.9368)  loss_objectness: 0.0651 (0.1609)  loss_rpn_box_reg: 0.0114 (0.0151)  time: 2.5280 (2.5050)  data: 0.2085 (0.2047)  lr: 0.000100  max mem: 5256
2019-01-17 22:09:06,580 maskrcnn_benchmark.trainer INFO: eta: 2 days, 14:07:33  iter: 720  loss: 0.7379 (1.1451)  loss_box_reg: 0.0050 (0.0013)  loss_classifier: 0.0249 (0.0425)  loss_mask: 0.6271 (0.9281)  loss_objectness: 0.0627 (0.1582)  loss_rpn_box_reg: 0.0104 (0.0150)  time: 2.5011 (2.5051)  data: 0.2019 (0.2047)  lr: 0.000100  max mem: 5256
2019-01-17 22:09:56,788 maskrcnn_benchmark.trainer INFO: eta: 2 days, 14:06:56  iter: 740  loss: 0.7073 (1.1333)  loss_box_reg: 0.0051 (0.0014)  loss_classifier: 0.0254 (0.0421)  loss_mask: 0.6085 (0.9194)  loss_objectness: 0.0609 (0.1556)  loss_rpn_box_reg: 0.0113 (0.0149)  time: 2.5135 (2.5052)  data: 0.1911 (0.2044)  lr: 0.000100  max mem: 5256
2019-01-17 22:10:46,863 maskrcnn_benchmark.trainer INFO: eta: 2 days, 14:06:02  iter: 760  loss: 0.7515 (1.1234)  loss_box_reg: 0.0047 (0.0015)  loss_classifier: 0.0227 (0.0417)  loss_mask: 0.6470 (0.9122)  loss_objectness: 0.0636 (0.1532)  loss_rpn_box_reg: 0.0115 (0.0148)  time: 2.5012 (2.5052)  data: 0.2180 (0.2046)  lr: 0.000100  max mem: 5256
2019-01-17 22:11:37,911 maskrcnn_benchmark.trainer INFO: eta: 2 days, 14:07:00  iter: 780  loss: 0.7045 (1.1130)  loss_box_reg: 0.0054 (0.0017)  loss_classifier: 0.0256 (0.0413)  loss_mask: 0.5956 (0.9046)  loss_objectness: 0.0576 (0.1508)  loss_rpn_box_reg: 0.0092 (0.0147)  time: 2.5574 (2.5064)  data: 0.2062 (0.2048)  lr: 0.000100  max mem: 5256
2019-01-17 22:12:27,989 maskrcnn_benchmark.trainer INFO: eta: 2 days, 14:06:04  iter: 800  loss: 0.7048 (1.1029)  loss_box_reg: 0.0058 (0.0018)  loss_classifier: 0.0235 (0.0408)  loss_mask: 0.6037 (0.8972)  loss_objectness: 0.0596 (0.1485)  loss_rpn_box_reg: 0.0097 (0.0146)  time: 2.4973 (2.5063)  data: 0.1859 (0.2045)  lr: 0.000100  max mem: 5256
2019-01-17 22:13:18,086 maskrcnn_benchmark.trainer INFO: eta: 2 days, 14:05:11  iter: 820  loss: 0.7212 (1.0936)  loss_box_reg: 0.0054 (0.0019)  loss_classifier: 0.0232 (0.0404)  loss_mask: 0.6005 (0.8904)  loss_objectness: 0.0603 (0.1464)  loss_rpn_box_reg: 0.0119 (0.0145)  time: 2.4939 (2.5063)  data: 0.2059 (0.2046)  lr: 0.000100  max mem: 5256
2019-01-17 22:14:08,369 maskrcnn_benchmark.trainer INFO: eta: 2 days, 14:04:38  iter: 840  loss: 0.7155 (1.0848)  loss_box_reg: 0.0070 (0.0020)  loss_classifier: 0.0282 (0.0402)  loss_mask: 0.6065 (0.8839)  loss_objectness: 0.0611 (0.1443)  loss_rpn_box_reg: 0.0108 (0.0144)  time: 2.5034 (2.5065)  data: 0.2056 (0.2045)  lr: 0.000100  max mem: 5256
2019-01-17 22:14:58,671 maskrcnn_benchmark.trainer INFO: eta: 2 days, 14:04:05  iter: 860  loss: 0.7192 (1.0765)  loss_box_reg: 0.0074 (0.0022)  loss_classifier: 0.0287 (0.0400)  loss_mask: 0.6017 (0.8776)  loss_objectness: 0.0613 (0.1424)  loss_rpn_box_reg: 0.0119 (0.0144)  time: 2.5154 (2.5067)  data: 0.1901 (0.2043)  lr: 0.000100  max mem: 5256
2019-01-17 22:15:48,727 maskrcnn_benchmark.trainer INFO: eta: 2 days, 14:03:07  iter: 880  loss: 0.7212 (1.0684)  loss_box_reg: 0.0054 (0.0022)  loss_classifier: 0.0250 (0.0397)  loss_mask: 0.6022 (0.8715)  loss_objectness: 0.0600 (0.1406)  loss_rpn_box_reg: 0.0127 (0.0144)  time: 2.4963 (2.5066)  data: 0.1964 (0.2043)  lr: 0.000100  max mem: 5256
2019-01-17 22:16:39,435 maskrcnn_benchmark.trainer INFO: eta: 2 days, 14:03:14  iter: 900  loss: 0.7175 (1.0606)  loss_box_reg: 0.0053 (0.0023)  loss_classifier: 0.0247 (0.0394)  loss_mask: 0.6050 (0.8658)  loss_objectness: 0.0578 (0.1388)  loss_rpn_box_reg: 0.0115 (0.0143)  time: 2.5343 (2.5072)  data: 0.2117 (0.2046)  lr: 0.000100  max mem: 5256
2019-01-17 22:17:30,576 maskrcnn_benchmark.trainer INFO: eta: 2 days, 14:04:01  iter: 920  loss: 0.7245 (1.0534)  loss_box_reg: 0.0099 (0.0025)  loss_classifier: 0.0341 (0.0393)  loss_mask: 0.6036 (0.8602)  loss_objectness: 0.0612 (0.1371)  loss_rpn_box_reg: 0.0129 (0.0143)  time: 2.5493 (2.5083)  data: 0.2195 (0.2048)  lr: 0.000100  max mem: 5256
2019-01-17 22:18:20,753 maskrcnn_benchmark.trainer INFO: eta: 2 days, 14:03:11  iter: 940  loss: 0.6998 (1.0464)  loss_box_reg: 0.0072 (0.0026)  loss_classifier: 0.0289 (0.0391)  loss_mask: 0.6048 (0.8549)  loss_objectness: 0.0568 (0.1354)  loss_rpn_box_reg: 0.0109 (0.0143)  time: 2.5010 (2.5083)  data: 0.2101 (0.2049)  lr: 0.000100  max mem: 5256
2019-01-17 22:19:10,725 maskrcnn_benchmark.trainer INFO: eta: 2 days, 14:02:03  iter: 960  loss: 0.6971 (1.0392)  loss_box_reg: 0.0069 (0.0027)  loss_classifier: 0.0267 (0.0388)  loss_mask: 0.5906 (0.8496)  loss_objectness: 0.0552 (0.1338)  loss_rpn_box_reg: 0.0107 (0.0142)  time: 2.4910 (2.5081)  data: 0.2080 (0.2050)  lr: 0.000100  max mem: 5256
2019-01-17 22:20:01,117 maskrcnn_benchmark.trainer INFO: eta: 2 days, 14:01:34  iter: 980  loss: 0.7165 (1.0330)  loss_box_reg: 0.0083 (0.0028)  loss_classifier: 0.0306 (0.0387)  loss_mask: 0.6092 (0.8450)  loss_objectness: 0.0568 (0.1323)  loss_rpn_box_reg: 0.0110 (0.0142)  time: 2.5191 (2.5084)  data: 0.2064 (0.2050)  lr: 0.000100  max mem: 5256
2019-01-17 22:20:52,115 maskrcnn_benchmark.trainer INFO: eta: 2 days, 14:01:58  iter: 1000  loss: 0.7160 (1.0268)  loss_box_reg: 0.0080 (0.0030)  loss_classifier: 0.0310 (0.0385)  loss_mask: 0.6088 (0.8404)  loss_objectness: 0.0555 (0.1307)  loss_rpn_box_reg: 0.0104 (0.0142)  time: 2.5365 (2.5092)  data: 0.2126 (0.2052)  lr: 0.000100  max mem: 5256
2019-01-17 22:20:52,118 maskrcnn_benchmark.utils.checkpoint INFO: Saving checkpoint to ./logs/test/model_0001000.pth
2019-01-17 22:21:56,361 maskrcnn_benchmark.trainer INFO: The mean dice coefficient: 0.007858631032481639
2019-01-17 22:22:45,806 maskrcnn_benchmark.trainer INFO: eta: 2 days, 15:33:28  iter: 1020  loss: 0.7067 (1.0207)  loss_box_reg: 0.0085 (0.0031)  loss_classifier: 0.0280 (0.0383)  loss_mask: 0.6026 (0.8358)  loss_objectness: 0.0557 (0.1293)  loss_rpn_box_reg: 0.0133 (0.0141)  time: 2.4922 (2.5715)  data: 0.1922 (0.2680)  lr: 0.000100  max mem: 5279
2019-01-17 22:23:35,986 maskrcnn_benchmark.trainer INFO: eta: 2 days, 15:30:49  iter: 1040  loss: 0.7193 (1.0148)  loss_box_reg: 0.0089 (0.0032)  loss_classifier: 0.0313 (0.0382)  loss_mask: 0.5942 (0.8313)  loss_objectness: 0.0583 (0.1280)  loss_rpn_box_reg: 0.0132 (0.0141)  time: 2.5065 (2.5703)  data: 0.2069 (0.2669)  lr: 0.000100  max mem: 5279
2019-01-17 22:24:26,121 maskrcnn_benchmark.trainer INFO: eta: 2 days, 15:28:11  iter: 1060  loss: 0.6884 (1.0089)  loss_box_reg: 0.0082 (0.0033)  loss_classifier: 0.0289 (0.0381)  loss_mask: 0.5980 (0.8269)  loss_objectness: 0.0541 (0.1266)  loss_rpn_box_reg: 0.0109 (0.0140)  time: 2.5008 (2.5691)  data: 0.2039 (0.2657)  lr: 0.000100  max mem: 5279
2019-01-17 22:25:16,568 maskrcnn_benchmark.trainer INFO: eta: 2 days, 15:26:03  iter: 1080  loss: 0.6954 (1.0033)  loss_box_reg: 0.0100 (0.0035)  loss_classifier: 0.0321 (0.0380)  loss_mask: 0.5795 (0.8226)  loss_objectness: 0.0517 (0.1253)  loss_rpn_box_reg: 0.0116 (0.0140)  time: 2.5158 (2.5682)  data: 0.2034 (0.2646)  lr: 0.000100  max mem: 5279
2019-01-17 22:26:07,550 maskrcnn_benchmark.trainer INFO: eta: 2 days, 15:24:41  iter: 1100  loss: 0.6944 (0.9980)  loss_box_reg: 0.0111 (0.0036)  loss_classifier: 0.0291 (0.0379)  loss_mask: 0.5938 (0.8186)  loss_objectness: 0.0535 (0.1240)  loss_rpn_box_reg: 0.0108 (0.0139)  time: 2.5432 (2.5678)  data: 0.2026 (0.2635)  lr: 0.000100  max mem: 5279
2019-01-17 22:26:58,349 maskrcnn_benchmark.trainer INFO: eta: 2 days, 15:23:05  iter: 1120  loss: 0.6801 (0.9924)  loss_box_reg: 0.0091 (0.0037)  loss_classifier: 0.0266 (0.0377)  loss_mask: 0.5817 (0.8144)  loss_objectness: 0.0516 (0.1227)  loss_rpn_box_reg: 0.0105 (0.0139)  time: 2.5270 (2.5673)  data: 0.1980 (0.2625)  lr: 0.000100  max mem: 5279
2019-01-17 22:27:48,500 maskrcnn_benchmark.trainer INFO: eta: 2 days, 15:20:41  iter: 1140  loss: 0.6813 (0.9871)  loss_box_reg: 0.0096 (0.0038)  loss_classifier: 0.0332 (0.0376)  loss_mask: 0.5877 (0.8104)  loss_objectness: 0.0499 (0.1215)  loss_rpn_box_reg: 0.0106 (0.0139)  time: 2.4958 (2.5663)  data: 0.2129 (0.2617)  lr: 0.000100  max mem: 5279
2019-01-17 22:28:38,563 maskrcnn_benchmark.trainer INFO: eta: 2 days, 15:18:13  iter: 1160  loss: 0.6813 (0.9819)  loss_box_reg: 0.0070 (0.0038)  loss_classifier: 0.0267 (0.0374)  loss_mask: 0.5856 (0.8065)  loss_objectness: 0.0505 (0.1203)  loss_rpn_box_reg: 0.0099 (0.0138)  time: 2.4951 (2.5652)  data: 0.1938 (0.2607)  lr: 0.000100  max mem: 5279
2019-01-17 22:29:29,312 maskrcnn_benchmark.trainer INFO: eta: 2 days, 15:16:39  iter: 1180  loss: 0.7097 (0.9772)  loss_box_reg: 0.0090 (0.0040)  loss_classifier: 0.0293 (0.0373)  loss_mask: 0.5909 (0.8030)  loss_objectness: 0.0561 (0.1192)  loss_rpn_box_reg: 0.0112 (0.0138)  time: 2.5297 (2.5647)  data: 0.1884 (0.2596)  lr: 0.000100  max mem: 5279
2019-01-17 22:30:19,968 maskrcnn_benchmark.trainer INFO: eta: 2 days, 15:15:01  iter: 1200  loss: 0.6946 (0.9726)  loss_box_reg: 0.0095 (0.0041)  loss_classifier: 0.0308 (0.0372)  loss_mask: 0.5959 (0.7996)  loss_objectness: 0.0492 (0.1180)  loss_rpn_box_reg: 0.0103 (0.0137)  time: 2.5247 (2.5642)  data: 0.2299 (0.2591)  lr: 0.000100  max mem: 5279
2019-01-17 22:31:11,050 maskrcnn_benchmark.trainer INFO: eta: 2 days, 15:13:55  iter: 1220  loss: 0.7018 (0.9682)  loss_box_reg: 0.0087 (0.0042)  loss_classifier: 0.0316 (0.0371)  loss_mask: 0.5920 (0.7963)  loss_objectness: 0.0500 (0.1170)  loss_rpn_box_reg: 0.0088 (0.0137)  time: 2.5321 (2.5640)  data: 0.2317 (0.2593)  lr: 0.000100  max mem: 5279
2019-01-17 22:32:02,243 maskrcnn_benchmark.trainer INFO: eta: 2 days, 15:12:57  iter: 1240  loss: 0.7104 (0.9640)  loss_box_reg: 0.0103 (0.0043)  loss_classifier: 0.0362 (0.0371)  loss_mask: 0.5901 (0.7931)  loss_objectness: 0.0496 (0.1159)  loss_rpn_box_reg: 0.0111 (0.0136)  time: 2.5546 (2.5640)  data: 0.2421 (0.2594)  lr: 0.000100  max mem: 5279
2019-01-17 22:32:52,859 maskrcnn_benchmark.trainer INFO: eta: 2 days, 15:11:19  iter: 1260  loss: 0.6956 (0.9599)  loss_box_reg: 0.0104 (0.0044)  loss_classifier: 0.0325 (0.0370)  loss_mask: 0.5884 (0.7899)  loss_objectness: 0.0508 (0.1149)  loss_rpn_box_reg: 0.0112 (0.0136)  time: 2.5265 (2.5634)  data: 0.2108 (0.2588)  lr: 0.000100  max mem: 5279
2019-01-17 22:33:43,318 maskrcnn_benchmark.trainer INFO: eta: 2 days, 15:09:32  iter: 1280  loss: 0.6863 (0.9558)  loss_box_reg: 0.0087 (0.0045)  loss_classifier: 0.0306 (0.0370)  loss_mask: 0.5780 (0.7869)  loss_objectness: 0.0463 (0.1139)  loss_rpn_box_reg: 0.0107 (0.0136)  time: 2.5110 (2.5628)  data: 0.2147 (0.2581)  lr: 0.000100  max mem: 5279
2019-01-17 22:34:33,797 maskrcnn_benchmark.trainer INFO: eta: 2 days, 15:07:48  iter: 1300  loss: 0.6761 (0.9517)  loss_box_reg: 0.0110 (0.0046)  loss_classifier: 0.0328 (0.0369)  loss_mask: 0.5790 (0.7837)  loss_objectness: 0.0489 (0.1129)  loss_rpn_box_reg: 0.0101 (0.0136)  time: 2.5179 (2.5622)  data: 0.2051 (0.2573)  lr: 0.000100  max mem: 5279
2019-01-17 22:35:24,468 maskrcnn_benchmark.trainer INFO: eta: 2 days, 15:06:18  iter: 1320  loss: 0.6913 (0.9478)  loss_box_reg: 0.0098 (0.0047)  loss_classifier: 0.0323 (0.0368)  loss_mask: 0.5840 (0.7808)  loss_objectness: 0.0503 (0.1120)  loss_rpn_box_reg: 0.0104 (0.0135)  time: 2.5270 (2.5618)  data: 0.2112 (0.2567)  lr: 0.000100  max mem: 5279
2019-01-17 22:36:15,658 maskrcnn_benchmark.trainer INFO: eta: 2 days, 15:05:24  iter: 1340  loss: 0.6749 (0.9438)  loss_box_reg: 0.0120 (0.0048)  loss_classifier: 0.0311 (0.0368)  loss_mask: 0.5679 (0.7777)  loss_objectness: 0.0478 (0.1111)  loss_rpn_box_reg: 0.0113 (0.0135)  time: 2.5406 (2.5617)  data: 0.2082 (0.2565)  lr: 0.000100  max mem: 5279
2019-01-17 22:37:06,412 maskrcnn_benchmark.trainer INFO: eta: 2 days, 15:04:01  iter: 1360  loss: 0.6752 (0.9400)  loss_box_reg: 0.0098 (0.0048)  loss_classifier: 0.0298 (0.0367)  loss_mask: 0.5702 (0.7748)  loss_objectness: 0.0446 (0.1101)  loss_rpn_box_reg: 0.0101 (0.0135)  time: 2.5390 (2.5614)  data: 0.2080 (0.2558)  lr: 0.000100  max mem: 5279
2019-01-17 22:37:56,934 maskrcnn_benchmark.trainer INFO: eta: 2 days, 15:02:25  iter: 1380  loss: 0.7199 (0.9368)  loss_box_reg: 0.0108 (0.0049)  loss_classifier: 0.0329 (0.0366)  loss_mask: 0.6111 (0.7725)  loss_objectness: 0.0485 (0.1093)  loss_rpn_box_reg: 0.0105 (0.0134)  time: 2.5218 (2.5609)  data: 0.1994 (0.2554)  lr: 0.000100  max mem: 5279
